/*PGR-GNU*****************************************************************

Copyright (c) 2024  pgRouting developers
Mail: project@pgrouting.org

------
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 ********************************************************************PGR-GNU*/
BEGIN;

SELECT plan(18);

/* -- 0 edge graph */
SELECT lives_ok($$
  SELECT * FROM pgr_lineGraph('SELECT id, source, target, cost, reverse_cost  FROM edges WHERE id = 20')
  $$, '00-lives: No edge on graph');
SELECT is_empty($$
  SELECT * FROM pgr_lineGraph('SELECT id, source, target, cost, reverse_cost FROM edges WHERE id = 20')
  $$, '01-empty: No edge on graph');
SELECT lives_ok($$
  SELECT * FROM pgr_lineGraph('SELECT id, source, target, cost, reverse_cost  FROM edges WHERE id = 20', false)
  $$, '02-lives: No edge on graph undi');
SELECT is_empty($$
  SELECT * FROM pgr_lineGraph('SELECT id, source, target, cost, reverse_cost FROM edges WHERE id = 20', false)
  $$, '03-empty: No edge on graph undi');

/* -- one edge graph */
SELECT lives_ok($$
  SELECT * FROM pgr_lineGraph('SELECT id, source, target, cost, reverse_cost  FROM edges WHERE id = 17')
  $$, '11-lives: one bi-edge directed');
SELECT CASE WHEN min_version('3.7.0') THEN set_eq($$
  SELECT * FROM pgr_lineGraph('SELECT id, source, target, cost, reverse_cost FROM edges WHERE id = 17')
  $$, $$VALUES (1,17,17,1,1)$$,
  '12-non empty: one bi-edge directed')
  ELSE skip(1, 'pgr_lineGraph was fixed on 3.7.0') END;

SELECT lives_ok($$
  SELECT * FROM pgr_lineGraph('SELECT id, source, target, cost, reverse_cost FROM edges WHERE id = 17', false)
  $$, '13-lives: one bi-edge undirected');
SELECT is_empty($$
  SELECT * FROM pgr_lineGraph('SELECT id, source, target, cost, reverse_cost FROM edges WHERE id = 17', false)
  $$, '14-empty: one bi-edge undirected');

SELECT lives_ok($$
  SELECT * FROM pgr_lineGraph('SELECT id, source, target, cost, reverse_cost FROM edges WHERE id = 12')
  $$, '3-lives: one edge directed');
SELECT is_empty($$
  SELECT * FROM pgr_lineGraph('SELECT id, source, target, cost, reverse_cost FROM edges WHERE id = 12')
  $$, '3-empty: one edge directed');

SELECT lives_ok($$
  SELECT * FROM pgr_lineGraph('SELECT id, source, target, cost, reverse_cost FROM edges WHERE id = 12', false)
  $$, '4-lives: one edge undirected');
SELECT is_empty($$
  SELECT * FROM pgr_lineGraph('SELECT id, source, target, cost, reverse_cost FROM edges WHERE id = 12', false)
  $$, '4-empty: one edge undirected');


/* -- two edge graphs */
SELECT lives_ok($$
  SELECT * FROM pgr_lineGraph('SELECT id, source, target, cost, reverse_cost FROM edges WHERE id IN (6,7)')
  $$, '5-lives: one bi-edge directed');
SELECT isnt_empty($$
  SELECT * FROM pgr_lineGraph('SELECT id, source, target, cost, reverse_cost FROM edges WHERE id IN (6,7)')
  $$, '5-not_empty: two bi-edge directed');
SELECT CASE WHEN min_version('3.7.0') THEN set_eq($$
  SELECT * FROM pgr_lineGraph('SELECT id, source, target, cost, reverse_cost FROM edges WHERE id IN (6,7)')
  $$,
  $$VALUES (1,6,6,1,1),(2,6,7,1,1),(3,7,7,1,1)$$,
  '5-set_eq: two bi-edge directed')
  ELSE skip(1, 'pgr_lineGraph was fixed on 3.7.0') END;

SELECT lives_ok($$
  SELECT * FROM pgr_lineGraph('SELECT id, source, target, cost, reverse_cost FROM edges WHERE id IN (6,7)', false)
  $$, '6-lives: two bi-edge undirected');
SELECT isnt_empty($$
  SELECT * FROM pgr_lineGraph('SELECT id, source, target, cost, reverse_cost FROM edges WHERE id IN (6,7)', false)
  $$, '6-not_empty: two bi-edge undirected');
SELECT set_eq($$
  SELECT * FROM pgr_lineGraph('SELECT id, source, target, cost, reverse_cost FROM edges WHERE id IN (6,7)', false)
  $$, $$VALUES (1,6,7,1,-1)$$,
  '6-set_eq: two bi-edge undirected');

SELECT finish();
ROLLBACK;
