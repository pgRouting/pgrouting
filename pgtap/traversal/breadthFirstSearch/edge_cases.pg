
/*PGR-GNU*****************************************************************

Copyright (c) 2018  pgRouting developers
Mail: project@pgrouting.org

------
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 ********************************************************************PGR-GNU*/
BEGIN;

UPDATE edges SET cost = sign(cost), reverse_cost = sign(reverse_cost);
SELECT plan(29);

CREATE OR REPLACE FUNCTION types_check()
RETURNS SETOF TEXT AS
$BODY$
DECLARE code TEXT := 'P0001';
BEGIN

  IF min_version('4.0.0') THEN
    code := 'XX000';
  END IF;

  -- 0 edges tests

  RETURN QUERY SELECT is_empty(' SELECT id, source, target, cost > 0, reverse_cost > 0  from edges where id>18 ','1');

  -- directed graph
  RETURN QUERY SELECT is_empty('
    SELECT * from pgr_breadthFirstSearch(''SELECT id, source, target, cost, reverse_cost  from edges where id>18 '', 5)', '2');
  RETURN QUERY SELECT is_empty('
    SELECT * from pgr_breadthFirstSearch(''SELECT id, source, target, cost, reverse_cost  from edges where id>18 '',array[5])','3');
  RETURN QUERY SELECT is_empty('
    SELECT * from pgr_breadthFirstSearch(''SELECT id, source, target, cost, reverse_cost  from edges where id>18 '',array[2,5])', '4');
  RETURN QUERY SELECT is_empty('
    SELECT * from pgr_breadthFirstSearch(''SELECT id, source, target, cost, reverse_cost  from edges where id>18 '', 5, max_depth => 2)', '5');
  RETURN QUERY SELECT is_empty('
    SELECT * from pgr_breadthFirstSearch(''SELECT id, source, target, cost, reverse_cost  from edges where id>18 '',array[5], max_depth => 2)','6');
  RETURN QUERY SELECT is_empty('
    SELECT * from pgr_breadthFirstSearch(''SELECT id, source, target, cost, reverse_cost  from edges where id>18 '',array[2,5], max_depth => 2)', '7');

  -- undirected graph
  RETURN QUERY SELECT is_empty('
    SELECT * from pgr_breadthFirstSearch(''SELECT id, source, target, cost, reverse_cost  from edges where id>18 '', 5, directed := false)', '8');
  RETURN QUERY SELECT is_empty('
    SELECT * from pgr_breadthFirstSearch(''SELECT id, source, target, cost, reverse_cost  from edges where id>18 '',array[5], directed := false)','9');
  RETURN QUERY SELECT is_empty('
    SELECT * from pgr_breadthFirstSearch(''SELECT id, source, target, cost, reverse_cost  from edges where id>18 '',array[2,5], directed := false)', '10');
  RETURN QUERY SELECT is_empty('
    SELECT * from pgr_breadthFirstSearch(''SELECT id, source, target, cost, reverse_cost  from edges where id>18 '', 5, max_depth => 2, directed := false)', '11');
  RETURN QUERY SELECT is_empty('
    SELECT * from pgr_breadthFirstSearch(''SELECT id, source, target, cost, reverse_cost  from edges where id>18 '',array[5], max_depth => 2, directed := false)','12');
  RETURN QUERY SELECT is_empty('
    SELECT * from pgr_breadthFirstSearch(''SELECT id, source, target, cost, reverse_cost  from edges where id>18 '',array[2,5], max_depth => 2, directed := false)', '13');


  -- vertex not present in graph tests

  -- directed graph
  RETURN QUERY SELECT is_empty('
    SELECT * from pgr_breadthFirstSearch(''SELECT id, source, target, cost, reverse_cost  from edges'', -10)', '14');
  RETURN QUERY SELECT is_empty('
    SELECT * from pgr_breadthFirstSearch(''SELECT id, source, target, cost, reverse_cost  from edges'',array[-10])','15');
  RETURN QUERY SELECT is_empty('
    SELECT * from pgr_breadthFirstSearch(''SELECT id, source, target, cost, reverse_cost  from edges'',array[20,-10])', '16');
  RETURN QUERY SELECT is_empty('
    SELECT * from pgr_breadthFirstSearch(''SELECT id, source, target, cost, reverse_cost  from edges'', -10, max_depth => 2)', '17');
  RETURN QUERY SELECT is_empty('
    SELECT * from pgr_breadthFirstSearch(''SELECT id, source, target, cost, reverse_cost  from edges'',array[-10], max_depth => 2)','18');
  RETURN QUERY SELECT is_empty('
    SELECT * from pgr_breadthFirstSearch(''SELECT id, source, target, cost, reverse_cost  from edges'',array[20,-10], max_depth => 2)', '19');

  -- undirected graph
  RETURN QUERY SELECT is_empty('
    SELECT * from pgr_breadthFirstSearch(''SELECT id, source, target, cost, reverse_cost  from edges'', -10, directed := false)', '20');
  RETURN QUERY SELECT is_empty('
    SELECT * from pgr_breadthFirstSearch(''SELECT id, source, target, cost, reverse_cost  from edges'',array[-10], directed := false)','21');
  RETURN QUERY SELECT is_empty('
    SELECT * from pgr_breadthFirstSearch(''SELECT id, source, target, cost, reverse_cost  from edges'',array[20,-10], directed := false)', '22');
  RETURN QUERY SELECT is_empty('
    SELECT * from pgr_breadthFirstSearch(''SELECT id, source, target, cost, reverse_cost  from edges'', -10, max_depth => 2, directed := false)', '23');
  RETURN QUERY SELECT is_empty('
    SELECT * from pgr_breadthFirstSearch(''SELECT id, source, target, cost, reverse_cost  from edges'',array[-10], max_depth => 2, directed := false)','24');
  RETURN QUERY SELECT is_empty('
    SELECT * from pgr_breadthFirstSearch(''SELECT id, source, target, cost, reverse_cost  from edges'',array[20,-10], max_depth => 2, directed := false)', '25');

  -- negative depth tests

  PREPARE breadthFirstSearch26 AS
  SELECT *
  FROM pgr_breadthFirstSearch(
    'SELECT id, source, target, cost, reverse_cost
    FROM edges',
    4, max_depth => -3
  );

  RETURN QUERY SELECT throws_ok('breadthFirstSearch26',
    code,
    'Negative value found on ''max_depth''',
    '26: Negative max_depth throws');



  PREPARE breadthFirstSearch27 AS
  SELECT *
  FROM pgr_breadthFirstSearch(
    'SELECT id, source, target, cost, reverse_cost
    FROM edges',
    ARRAY[4, 10], max_depth => -3
  );

  RETURN QUERY SELECT throws_ok('breadthFirstSearch27',
    code,
    'Negative value found on ''max_depth''',
    '27: Negative max_depth throws');

  PREPARE breadthFirstSearch28 AS
  SELECT *
  FROM pgr_breadthFirstSearch(
    'SELECT id, source, target, cost, reverse_cost
    FROM edges',
    4, max_depth => -3, directed => false
  );

  RETURN QUERY SELECT throws_ok('breadthFirstSearch28',
    code,
    'Negative value found on ''max_depth''',
    '28: Negative max_depth throws');

  PREPARE breadthFirstSearch29 AS
  SELECT *
  FROM pgr_breadthFirstSearch(
    'SELECT id, source, target, cost, reverse_cost
    FROM edges',
    ARRAY[4, 10], max_depth => -3, directed => false
  );

  RETURN QUERY SELECT throws_ok('breadthFirstSearch29',
    code,
    'Negative value found on ''max_depth''',
    '29: Negative max_depth throws');

END;
$BODY$
LANGUAGE plpgsql;

SELECT types_check();
SELECT * FROM finish();
ROLLBACK;
