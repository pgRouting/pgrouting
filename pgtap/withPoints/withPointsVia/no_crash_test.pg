BEGIN;

UPDATE edge_table SET cost = sign(cost), reverse_cost = sign(reverse_cost);
SELECT CASE WHEN min_version('3.4.0') THEN plan(19) ELSE plan(4) END;

PREPARE edges AS
SELECT id, source, target, cost, reverse_cost  FROM edge_table;

PREPARE null_ret AS
SELECT id FROM edge_table_vertices_pgr  WHERE id IN (-1);

PREPARE null_ret_arr AS
SELECT array_agg(id) FROM edge_table_vertices_pgr  WHERE id IN (-1);

SELECT isnt_empty('edges', 'Should be not empty to tests be meaningful');
SELECT is_empty('null_ret', 'Should be empty to tests be meaningful');
SELECT set_eq('null_ret_arr', 'SELECT NULL::BIGINT[]', 'Should be empty to tests be meaningful');


CREATE OR REPLACE FUNCTION test_function()
RETURNS SETOF TEXT AS
$BODY$
DECLARE
params TEXT[];
subs TEXT[];
BEGIN

IF NOT min_version('3.4.0') THEN
    RETURN QUERY SELECT skip(1, 'Signature added on 3.4.0');
    RETURN;
END IF;

-- ONE VIA
params = ARRAY[
'$$SELECT * FROM edge_table$$',
'$$SELECT * FROM pointsOfInterest$$',
'ARRAY[2,5]::BIGINT[]'
]::TEXT[];

subs = ARRAY[
'NULL',
'NULL',
'(SELECT array_agg(id) FROM edge_table_vertices_pgr  WHERE id IN (-1))'
]::TEXT[];

RETURN query SELECT * FROM no_crash_test('pgr_withPointsvia', params, subs);

subs = ARRAY[
'NULL',
'NULL',
'NULL::BIGINT[]'
]::TEXT[];
RETURN query SELECT * FROM no_crash_test('pgr_withPointsvia', params, subs);

END
$BODY$
LANGUAGE plpgsql VOLATILE;


SELECT * FROM test_function();

ROLLBACK;
