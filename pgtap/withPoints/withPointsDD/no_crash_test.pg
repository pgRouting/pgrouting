
/*PGR-GNU*****************************************************************

Copyright (c) 2018  pgRouting developers
Mail: project at pgrouting.org

------
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 ********************************************************************PGR-GNU*/
BEGIN;

UPDATE edges SET cost = sign(cost), reverse_cost = sign(reverse_cost);
SELECT CASE WHEN min_version('3.6.0') THEN plan(50) ELSE plan(42) END;

PREPARE edges AS
SELECT id, source, target, cost, reverse_cost  FROM edges;

PREPARE pois AS
SELECT pid, edge_id, fraction from pointsOfInterest;

PREPARE null_ret AS
SELECT array_agg(id) FROM vertices WHERE id IN (-1);

SELECT isnt_empty('edges', 'Should be not empty to tests be meaningful');
SELECT set_eq('null_ret', 'SELECT NULL::BIGINT[]', 'Should be empty to tests be meaningful');


CREATE OR REPLACE FUNCTION test_function()
RETURNS SETOF TEXT AS
$BODY$
DECLARE
params TEXT[];
subs TEXT[];
BEGIN
IF min_version('3.6.0') THEN

    -- 1 to distance
    params = ARRAY[
    '$$SELECT id, source, target, cost, reverse_cost  FROM edges$$',
    '$$SELECT pid, edge_id, fraction from pointsOfInterest$$',
    '1',
    '1.3::FLOAT',
	'$$r$$'
    ]::TEXT[];
    subs = ARRAY[
    'NULL',
    'NULL',
    '(SELECT id FROM vertices WHERE id IN (-1))',
    'NULL',
	'NULL'
    ]::TEXT[];

    RETURN query SELECT * FROM no_crash_test('pgr_withPointsDD', params, subs);

    subs = ARRAY[
    'NULL',
    'NULL',
    'NULL::BIGINT',
    'NULL',
	'NULL'
    ]::TEXT[];
    RETURN query SELECT * FROM no_crash_test('pgr_withPointsDD', params, subs);

    -- many to distance
    params = ARRAY[
    '$$SELECT id, source, target, cost, reverse_cost  FROM edges$$',
    '$$SELECT pid, edge_id, fraction from pointsOfInterest$$',
    'ARRAY[1]',
    '1.3::FLOAT',
	'$$r$$'
    ]::TEXT[];
    subs = ARRAY[
    'NULL',
    'NULL',
    '(SELECT array_agg(id) FROM vertices WHERE id IN (-1))',
    'NULL',
	'NULL'
    ]::TEXT[];

    RETURN query SELECT * FROM no_crash_test('pgr_withPointsDD', params, subs);

    subs = ARRAY[
    'NULL',
    'NULL',
    'NULL::BIGINT[]',
    'NULL',
	'NULL'
    ]::TEXT[];
    RETURN query SELECT * FROM no_crash_test('pgr_withPointsDD', params, subs);

ELSE

/* TODO remove tests on v4 of the old signatures */
SET client_min_messages TO ERROR;
    -- 1 to distance
    params = ARRAY[
    '$$SELECT id, source, target, cost, reverse_cost  FROM edges$$',
    '$$SELECT pid, edge_id, fraction from pointsOfInterest$$',
    '1',
    '1.3::FLOAT'
    ]::TEXT[];
    subs = ARRAY[
    'NULL',
    'NULL',
    '(SELECT id FROM vertices WHERE id IN (-1))',
    'NULL'
    ]::TEXT[];

    RETURN query SELECT * FROM no_crash_test('pgr_withPointsDD', params, subs);

    subs = ARRAY[
    'NULL',
    'NULL',
    'NULL::BIGINT',
    'NULL'
    ]::TEXT[];
    RETURN query SELECT * FROM no_crash_test('pgr_withPointsDD', params, subs);

    -- many to distance
    params = ARRAY[
    '$$SELECT id, source, target, cost, reverse_cost  FROM edges$$',
    '$$SELECT pid, edge_id, fraction from pointsOfInterest$$',
    'ARRAY[1]',
    '1.3::FLOAT'
    ]::TEXT[];
    subs = ARRAY[
    'NULL',
    'NULL',
    '(SELECT array_agg(id) FROM vertices WHERE id IN (-1))',
    'NULL'
    ]::TEXT[];

    RETURN query SELECT * FROM no_crash_test('pgr_withPointsDD', params, subs);

    subs = ARRAY[
    'NULL',
    'NULL',
    'NULL::BIGINT[]',
    'NULL'
    ]::TEXT[];
    RETURN query SELECT * FROM no_crash_test('pgr_withPointsDD', params, subs);

END IF;

END
$BODY$
LANGUAGE plpgsql VOLATILE;


SELECT * FROM test_function();

SELECT finish();
ROLLBACK;
