/*PGR-GNU*****************************************************************

Copyright (c) 2023  pgRouting developers
Mail: project at pgrouting.org

------
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 ********************************************************************PGR-GNU*/

BEGIN;

UPDATE edge_table SET cost = sign(cost) + 0.001 * id * id, reverse_cost = sign(reverse_cost) + 0.001 * id * id;
SELECT plan(1);

CREATE OR REPLACE FUNCTION test_cases()
RETURNS SETOF TEXT AS
$BODY$
BEGIN
  IF NOT min_version('3.6.0') THEN
    RETURN QUERY SELECT skip(1, 'new signature on 3.6.0');
    RETURN;
  END IF;

/* withPoinstsDD starting from a vertex NO details*/
prepare nodetails1 AS
SELECT seq, depth, start_vid,  node, edge, round(cost::numeric, 3) AS cost, round(agg_cost::numeric, 3)  AS agg_cost FROM pgr_withPointsDD(
      'SELECT id, source, target, cost, reverse_cost FROM edge_table ORDER BY id',
      'SELECT pid, edge_id, fraction, side from pointsOfInterest where pid > 100',
      1, 4.8, 'r', directed => true, details => false)
WHERE node > 0;

prepare expected1 AS
SELECT seq, depth, start_vid,  node, edge, round(cost::numeric, 3) AS cost, round(agg_cost::numeric, 3)  AS agg_cost FROM pgr_drivingDistance(
      'SELECT id, source, target, cost, reverse_cost FROM edge_table ORDER BY id',
      1, 4.8, directed => true);

RETURN QUERY
SELECT set_eq('nodetails1', 'expected1');

END;
$BODY$
language plpgsql;

SELECT test_cases();
SELECT finish();
ROLLBACK;
