/*PGR-GNU*****************************************************************

Copyright (c) 2018  pgRouting developers
Mail: project at pgrouting.org

------
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 ********************************************************************PGR-GNU*/

BEGIN;

SET extra_float_digits = -3;
-- UPDATE edges SET cost = sign(cost) + 0.001 * id * id, reverse_cost = sign(reverse_cost) + 0.001 * id * id;
SELECT CASE WHEN min_version('3.6.0') THEN plan(6) ELSE plan(3) END;

CREATE OR REPLACE FUNCTION test_new()
RETURNS SETOF TEXT AS
$BODY$
BEGIN

  -- queries
  IF min_version('3.6.0') THEN
    PREPARE q1 AS
    SELECT node, edge, round(cost::numeric, 12) AS cost, round(agg_cost::numeric, 12) AS agg_cost FROM pgr_withPointsDD(
      'SELECT id, source, target, cost, reverse_cost FROM edges ORDER BY id',
      'SELECT pid, edge_id, fraction, side from pointsOfInterest',
      -1, 6.8, 'r', details := false);

    PREPARE q2 AS
    SELECT node, edge, round(cost::numeric, 12) AS cost, round(agg_cost::numeric, 12) AS agg_cost FROM pgr_withPointsDD(
      'SELECT id, source, target, cost, reverse_cost FROM edges ORDER BY id',
      'SELECT pid, edge_id, fraction, side from pointsOfInterest',
      -1, 6.8, 'l', details := false);

    PREPARE q3 AS
    SELECT node, edge, round(cost::numeric, 12) AS cost, round(agg_cost::numeric, 12) AS agg_cost FROM pgr_withPointsDD(
      'SELECT id, source, target, cost, reverse_cost FROM edges ORDER BY id',
      'SELECT pid, edge_id, fraction, side from pointsOfInterest',
      -1, 6.8, 'b', details := false, directed:=false);


  END IF;

  /* TODO remove old on v4 */
  PREPARE q1old AS
  SELECT node, edge, round(cost::numeric, 12) AS cost, round(agg_cost::numeric, 12) AS agg_cost FROM pgr_withPointsDD(
    'SELECT id, source, target, cost, reverse_cost FROM edges ORDER BY id',
    'SELECT pid, edge_id, fraction, side from pointsOfInterest',
    -1, 6.8, driving_side => 'r', details := false);

  PREPARE q2old AS
  SELECT node, edge, round(cost::numeric, 12) AS cost, round(agg_cost::numeric, 12) AS agg_cost FROM pgr_withPointsDD(
    'SELECT id, source, target, cost, reverse_cost FROM edges ORDER BY id',
    'SELECT pid, edge_id, fraction, side from pointsOfInterest',
    -1, 6.8, driving_side => 'l', details := false);

  PREPARE q3old AS
  SELECT node, edge, round(cost::numeric, 12) AS cost, round(agg_cost::numeric, 12) AS agg_cost FROM pgr_withPointsDD(
    'SELECT id, source, target, cost, reverse_cost FROM edges ORDER BY id',
    'SELECT pid, edge_id, fraction, side from pointsOfInterest',
    -1, 6.8, driving_side => 'b', details := false, directed:=false);

  -- expected results
  IF min_version('3.6.0') THEN
    PREPARE e2 AS
    SELECT
    node::BIGINT, edge::BIGINT, cost::FLOAT, agg_cost::FLOAT
    FROM
    (VALUES
      (-1, -1,   0,         0),
      ( 6,  1, 0.6,    0.6),
      ( 5,  1,   1,    1.6),
      ( 7,  4,   1,    1.6),
      ( 3,  7,   1,    2.6),
      (11,  8,   1,    2.6),
      ( 1,  6,   1,    3.6),
      ( 8, 10,   1,    2.6),
      (16,  9,   1,    3.6),
      (12, 11,   1,    3.6),
      ( 9, 14,   1,    3.6),
      (17, 15,   1,    4.6),
      (15, 16,   1,    4.6),
      (10,  3,   1,    5.6)
    ) AS t (node, edge, cost, agg_cost);
  END IF;

  PREPARE e1 AS
  SELECT
  node::BIGINT, edge::BIGINT, cost::FLOAT, agg_cost::FLOAT
  FROM
  (VALUES
    ( -1,  -1,   0,   0),
    (  5,   1,   0.4, 0.4),
    (  6,   1,   1,   1.4),
    (  7,   4,   1,   2.4),
    (  3,   7,   1,   3.4),
    ( 11,   8,   1,   3.4),
    (  8,  10,   1,   3.4),
    (  1,   6,   1,   4.4),
    ( 16,   9,   1,   4.4),
    ( 12,  11,   1,   4.4),
    (  9,  14,   1,   4.4),
    ( 17,  13,   1,   5.4),
    ( 15,  16,   1,   5.4),
    ( 10,   3,   1,   6.4)
  ) AS t (node, edge, cost, agg_cost);

  PREPARE e2old AS
  SELECT
  node::BIGINT, edge::BIGINT, cost::FLOAT, agg_cost::FLOAT
  FROM
  (VALUES
    ( -1,  -1,  0,   0),
    (  6,   1,  0.6, 0.6),
    (  5,   1,  1,  1.6),
    (  7,   4,  1,  1.6),
    (  3,   7,  1,  2.6),
    (  8,  10,  1,  2.6),
    ( 11,   8,  1,  2.6),
    (  1,   6,  1,  3.6),
    ( 16,   9,  1,  3.6),
    ( 12,  11,  1,  3.6),
    (  9,  14,  1,  3.6),
    ( 17,  15,  1,  4.6),
    ( 15,  16,  1,  4.6),
    ( 10,   3,  1,  5.6)
  ) AS t (node, edge, cost, agg_cost);

  PREPARE e3 AS
  SELECT
  node::BIGINT, edge::BIGINT, cost::FLOAT, agg_cost::FLOAT
  FROM
  (VALUES
    ( -1, -1,  0,   0),
    (  6,  1,  0.6, 0.6),
    (  5,  1,  0.4, 0.4),
    ( 10,  2,  1,  1.6),
    (  7,  4,  1,  1.6),
    ( 15,  3,  1,  2.6),
    (  3,  7,  1,  2.6),
    ( 11,  8,  1,  2.6),
    (  8, 10,  1,  2.6),
    (  1,  6,  1,  3.6),
    ( 16,  9,  1,  3.6),
    ( 12, 11,  1,  3.6),
    (  9, 14,  1,  3.6),
    ( 17, 13,  1,  4.6)
  ) AS t (node, edge, cost, agg_cost);


  IF min_version('3.6.0') THEN
    RETURN QUERY
    SELECT set_eq('q1', 'e1', 'right driving side, DIR');

    RETURN QUERY
    SELECT set_eq('q2', 'e2', 'left driving side, DIR');

    RETURN QUERY
    SELECT set_eq('q3', 'e3', 'both driving sides, UNDI');
  END IF;

  SET client_min_messages TO ERROR;
  /* TODO remove old tests on v4 */
  RETURN QUERY
  SELECT set_eq('q1old', 'e1', 'old: right driving side, DIR');

  RETURN QUERY
  SELECT set_eq('q2old', 'e2old', 'old: left driving side, DIR');

  RETURN QUERY
  SELECT set_eq('q3old', 'e3', 'old: both driving sides, UNDI');
  SET client_min_messages TO WARNING;


END;
$BODY$
language plpgsql;

SELECT test_new();
SELECT finish();
ROLLBACK;
