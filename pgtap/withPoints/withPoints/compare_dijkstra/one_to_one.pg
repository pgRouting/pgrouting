/*PGR-GNU*****************************************************************

Copyright (c) 2020 pgRouting developers
Mail: project@pgrouting.org

------

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 ********************************************************************PGR-GNU*/
BEGIN;

SELECT CASE
WHEN NOT min_lib_version('3.1.1') THEN plan(1)
ELSE plan(1156) END;

SET extra_float_digits = -3;

UPDATE edges SET cost = sign(cost) + 0.001 * id * id, reverse_cost = sign(reverse_cost) + 0.001 * id * id;

CREATE or REPLACE FUNCTION compareDijkstra(quantity INTEGER default 17)
RETURNS SETOF TEXT AS
$BODY$
DECLARE
  inner_sql TEXT;
  empty_points TEXT;
  with_reverse TEXT;
  no_reverse TEXT;
  dijkstra_sql TEXT;
  withPoints_sql TEXT;
  result_columns TEXT;
  drv_right TEXT;
  drv_both TEXT;
BEGIN
  IF NOT min_lib_version('3.1.1') THEN
    RETURN QUERY
    SELECT skip(1, 'Issue fixed on 3.1.1');
    RETURN;
  END IF;

  IF NOT min_version('4.0.0') AND min_lib_version('4.0.0') THEN
    SET client_min_messages TO WARNING;
  END IF;

  IF min_version('4.0.0') THEN
    drv_right := $$, 'r'$$;
    drv_both := $$, 'b'$$;
  ELSE
    SET client_min_messages TO WARNING;
    drv_right := $$, driving_side => 'r'$$;
    drv_both := $$, driving_side => 'b'$$;
  END IF;

  result_columns := 'seq, path_seq, node, edge, cost, agg_cost';
  empty_points := 'SELECT * FROM pointsofinterest WHERE pid IN (-1)';
  with_reverse := 'SELECT * FROM edges';
  no_reverse := 'SELECT id, source, target, cost FROM edges';


  FOR i IN 1.. quantity LOOP
    FOR j IN 1.. quantity LOOP

      dijkstra_sql := 'SELECT ' || result_columns || ' FROM pgr_dijkstra($$' || with_reverse || '$$, '
        || i || ', ' || j || ', directed => true)';
      withPoints_sql := 'SELECT ' || result_columns || ' FROM pgr_withPoints($$' || with_reverse || '$$, $$'
        || empty_points || '$$, '
        || i || ', ' || j || drv_right || ', directed => true)';
      RETURN query SELECT set_eq(withPoints_sql, dijkstra_sql, withPoints_sql);

      dijkstra_sql := 'SELECT ' || result_columns || ' FROM pgr_dijkstra($$' || with_reverse || '$$, '
        || i || ', ' || j || ', directed => false)';
      withPoints_sql := 'SELECT ' || result_columns || ' FROM pgr_withPoints($$' || with_reverse || '$$, $$'
        || empty_points || '$$, '
        || i || ', ' || j || drv_both || ', directed => false)';
      RETURN query SELECT set_eq(withPoints_sql, dijkstra_sql, withPoints_sql);

      dijkstra_sql := 'SELECT ' || result_columns || ' FROM pgr_dijkstra($$' || no_reverse || '$$, '
        || i || ', ' || j || ', directed => true)';
      withPoints_sql := 'SELECT ' || result_columns || ' FROM pgr_withPoints($$' || no_reverse || '$$, $$'
        || empty_points || '$$, '
        || i || ', ' || j || drv_right || ', directed => true)';
      RETURN query SELECT set_eq(withPoints_sql, dijkstra_sql, withPoints_sql);

      dijkstra_sql := 'SELECT ' || result_columns || ' FROM pgr_dijkstra($$' || no_reverse || '$$, '
        || i || ', ' || j || ', directed => false)';
      withPoints_sql := 'SELECT ' || result_columns || ' FROM pgr_withPoints($$' || no_reverse || '$$, $$'
        || empty_points || '$$, '
        || i || ', ' || j || drv_both || ', directed => false)';
      RETURN query SELECT set_eq(withPoints_sql, dijkstra_sql, withPoints_sql);

    END LOOP;
  END LOOP;

RETURN;
END
$BODY$
language plpgsql;

SELECT * from compareDijkstra();


SELECT * FROM finish();
ROLLBACK;

