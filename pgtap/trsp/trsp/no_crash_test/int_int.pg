BEGIN;

UPDATE edge_table SET cost = sign(cost), reverse_cost = sign(reverse_cost);
SELECT CASE WHEN min_version('4.0.0') THEN plan(38) ELSE plan(1) END;

PREPARE edges AS
SELECT id, source, target, cost, reverse_cost FROM edge_table;

PREPARE null_ret AS
SELECT id FROM edge_table_vertices_pgr  WHERE id IN (-1);
CREATE OR REPLACE FUNCTION no_crash_test(func TEXT, params TEXT[], subs TEXT[])
RETURNS SETOF TEXT AS
$BODY$
DECLARE
mp TEXT[];
q1 TEXT;
q TEXT;
separator TEXT;
BEGIN
    FOR i IN 0..array_length(params, 1) LOOP
        separator = ' ';
        mp := params;
        IF i != 0 THEN
            mp[i] = subs[i];
        END IF;

        q1 := 'SELECT * FROM ' || $1 || ' (';

        FOR i IN 1..array_length(mp, 1) LOOP
            q1 := q1 || separator || mp[i];
            separator :=',';
        END LOOP;

        q1 := q1 || ')';

        -- RAISE WARNING '%', q1;


        RETURN query SELECT * FROM lives_ok(q1, 'i = ' || i || ' lives_ok: ' || q1);
        IF i IN (0) THEN
          RETURN query SELECT * FROM isnt_empty(q1, 'i = ' || i || ' isnt_empty: ' || q1);
        ELSE
          RETURN query SELECT * FROM is_empty(q1, 'i = ' || i || ' is_empty: ' || q1);
        END IF;

    END LOOP;

END
$BODY$
LANGUAGE plpgsql VOLATILE;

CREATE OR REPLACE FUNCTION test_function()
RETURNS SETOF TEXT AS
$BODY$
DECLARE
params TEXT[];
subs TEXT[];
BEGIN
  IF NOT min_version('4.0.0') THEN
    RETURN QUERY SELECT skip(1, 'pgRouting needs update');
    RETURN;
  END IF;

  RETURN QUERY SELECT isnt_empty('edges', 'Should not be empty to tests be meaningful');
  RETURN QUERY SELECT is_empty('null_ret', 'Should be empty to tests be meaningful');

  params = ARRAY[
  '$$SELECT id::INTEGER, source::INTEGER, target::INTEGER, cost, reverse_cost  FROM edge_table$$',
  '$$SELECT * FROM new_restrictions WHERE id > 7$$',
  '1',
  '2',
  'true'
  ]::TEXT[];
  subs = ARRAY[
  'NULL',
  'NULL',
  '(SELECT id::INTEGER FROM edge_table_vertices_pgr  WHERE id IN (-1))',
  '(SELECT id::INTEGER FROM edge_table_vertices_pgr  WHERE id IN (-1))',
  'NULL'
  ]::TEXT[];

  RETURN query SELECT * FROM no_crash_test('pgr_trsp', params, subs);

  subs = ARRAY[
  'NULL',
  'NULL',
  'NULL',
  'NULL',
  'NULL'
  ]::TEXT[];
  RETURN query SELECT * FROM no_crash_test('pgr_trsp', params, subs);

  params = ARRAY[
  '$$edges$$',
  '$$SELECT * FROM new_restrictions WHERE id > 7$$',
  '1',
  '2',
  'true'
  ]::TEXT[];
  RETURN query SELECT no_crash_test('pgr_trsp', params, subs);

END
$BODY$
LANGUAGE plpgsql VOLATILE;


SELECT * FROM test_function();

ROLLBACK;
