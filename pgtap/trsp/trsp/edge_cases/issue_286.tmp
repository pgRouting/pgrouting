BEGIN;

SELECT plan(1);
UPDATE edge_table SET cost = sign(cost) + 0.001 * id * id, reverse_cost = sign(reverse_cost) + 0.001 * id * id;

-- not living ok: when the restrictions table does not exist
SELECT * FROM pgr_trsp(
  $$SELECT id, source, target, cost, reverse_cost
    FROM edge_table WHERE id in (3,5,9)$$,
  $$SELECT * FROM new_restrictions$$,
  4, 9);
ERROR:  AssertFailedException: m_id_to_idx.find(start_vertex) != m_id_to_idx.end() at /home/vicky/pgrouting/pgrouting/cvvergara/src/trsp/pgr_trspHandler.cpp:324

-- Create network table
CREATE TABLE network (
    id serial,
    source integer,
    target integer,
    cost double precision,
    reverse_cost double precision,
    x1 double precision,
    y1 double precision,
    x2 double precision,
    y2 double precision,
    the_geom geometry
);

-- Create restrictions table
CREATE TABLE restrictions (
    id serial,
    cost FLOAT,
    path BIGINT[]
);

-- Populate network table
INSERT INTO network (x1,y1,x2,y2) VALUES
	(0,0,1,0),(1,0,4,0),(4,0,5,0),(5,0,5,5),(5,5,0,5),(0,5,0,0),
	(1,0,2,1),(2,1,3,1),(3,1,4,0)
;

UPDATE network SET the_geom = ST_makeline(ST_point(x1,y1),ST_point(x2,y2));
UPDATE network SET cost = ST_length(the_geom), reverse_cost = ST_length(the_geom);
SELECT pgr_createTopology('network',0.001)

INSERT INTO restrictions (cost, path) VALUES (100,ARRAY[9,2]),(100,ARRAY[2,9]),(100,ARRAY[7,2]),(100, ARRAY[2,7]);

SELECT *
FROM pgr_dijkstra(
  'SELECT * FROM network',
  4, 1
);

SELECT *
FROM pgr_trsp(
  'SELECT * FROM network',
  'SELECT * FROM restrictions',
  4, 1
);

SELECT *
FROM pgr_withPoints(
  $$SELECT id, source, target, cost, reverse_cost FROM network$$,
  $$SELECT * FROM (VALUES (1, 2, 0.75),(2, 8, 0.5)) AS t(pid, edge_id, fraction)$$,
  -1, -2,
  details => false);


SELECT *
FROM pgr_trsp_withPoints(
  $$SELECT id, source, target, cost, reverse_cost FROM network$$,
  $$SELECT * FROM restrictions$$,
  $$SELECT * FROM (VALUES (1, 2, 0.75),(2, 8, 0.5)) AS t(pid, edge_id, fraction)$$,
  -1, -2,
  details => false);


CREATE OR REPLACE PROCEDURE issue_286() AS
$BODY$
BEGIN
  IF min_version('3.4.0') THEN
    PREPARE q1 AS
      SELECT seq, node, edge, cost::text FROM pgr_trsp(
        $$SELECT id, source, target, cost FROM edge_table$$,
        $$SELECT * FROM restrictions WHERE id > 10$$,
        7, 12, false);
    PREPARE q2 AS
      (SELECT seq, node, edge, cost::text
      FROM pgr_dijkstra('SELECT id, source, target, cost FROM edge_table order by id',7, 12, FALSE))
      UNION
      (SELECT seq, node, edge, cost::text
      FROM pgr_dijkstra('SELECT id, source, target, cost FROM edge_table order by source',7, 12, FALSE));

  ELSE

    PREPARE q1 AS
      SELECT seq, id1, id2, cost::text
      FROM pgr_trsp($$SELECT id::INTEGER, source::INTEGER, target::INTEGER, cost FROM edge_table$$, 7, 12, FALSE, false);
    PREPARE q2 AS
      (SELECT seq-1, node::INTEGER, edge::INTEGER, cost::text
        FROM pgr_dijkstra('SELECT id, source, target, cost FROM edge_table order by id',7, 12, FALSE))
      UNION ALL
      (SELECT seq-1, node::INTEGER, edge::INTEGER, cost::text
        FROM pgr_dijkstra('SELECT id, source, target, cost FROM edge_table order by source',7, 12, FALSE));

  END IF;
END;
$BODY$
LANGUAGE plpgsql;


CALL edge_cases();
SELECT set_eq('q2', 'q1', 'path found');

SELECT finish();
ROLLBACK;

