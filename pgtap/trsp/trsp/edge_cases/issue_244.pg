
/*PGR-GNU*****************************************************************

Copyright (c) 2018  pgRouting developers
Mail: project@pgrouting.org

------
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 ********************************************************************PGR-GNU*/
BEGIN;

SELECT plan(1);
UPDATE edge_table SET cost = sign(cost) + 0.001 * id * id, reverse_cost = sign(reverse_cost) + 0.001 * id * id;

-- should be a procedure
CREATE OR REPLACE FUNCTION edge_cases()
RETURNS void AS
$BODY$
BEGIN
  IF min_version('3.4.0') THEN
    PREPARE q1 AS
      SELECT seq, node, edge, cost::text FROM pgr_trsp(
        $$SELECT id, source, target, cost FROM edge_table$$,
        $$SELECT * FROM restrictions WHERE id > 10$$,
        7, 12, false);
    PREPARE q2 AS
      (SELECT seq, node, edge, cost::text
      FROM pgr_dijkstra('SELECT id, source, target, cost FROM edge_table order by id',7, 12, FALSE))
      UNION
      (SELECT seq, node, edge, cost::text
      FROM pgr_dijkstra('SELECT id, source, target, cost FROM edge_table order by source',7, 12, FALSE));

  ELSE

    PREPARE q1 AS
      SELECT seq, id1, id2, cost::text
      FROM pgr_trsp($$SELECT id::INTEGER, source::INTEGER, target::INTEGER, cost FROM edge_table$$, 7, 12, FALSE, false);
    PREPARE q2 AS
      (SELECT seq-1, node::INTEGER, edge::INTEGER, cost::text
        FROM pgr_dijkstra('SELECT id, source, target, cost FROM edge_table order by id',7, 12, FALSE))
      UNION ALL
      (SELECT seq-1, node::INTEGER, edge::INTEGER, cost::text
        FROM pgr_dijkstra('SELECT id, source, target, cost FROM edge_table order by source',7, 12, FALSE));

  END IF;
END;
$BODY$
LANGUAGE plpgsql;


SELECT edge_cases();
SELECT set_eq('q2', 'q1', 'path found');

SELECT finish();
ROLLBACK;

