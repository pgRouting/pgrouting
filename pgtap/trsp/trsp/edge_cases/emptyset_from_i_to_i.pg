
/*PGR-GNU*****************************************************************

Copyright (c) 2018  pgRouting developers
Mail: project@pgrouting.org

------
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 ********************************************************************PGR-GNU*/
BEGIN;

UPDATE edges SET cost = sign(cost), reverse_cost = sign(reverse_cost);
SELECT CASE WHEN min_lib_version('4.0.0') AND min_version('3.6.0') THEN plan(72)
            WHEN NOT min_lib_version('4.0.0') AND min_version('3.4.0') THEN plan(72)
            ELSE plan(2) END;

PREPARE restriction AS SELECT * FROM restrictions;
PREPARE with_reverse AS SELECT id, source, target, cost, reverse_cost FROM edges ORDER BY id;
PREPARE no_reverse AS SELECT id, source, target, cost FROM edges ORDER BY id;

CREATE OR REPLACE FUNCTION edge_cases(cant INTEGER DEFAULT 18, flag BOOLEAN DEFAULT true )
RETURNS SETOF TEXT AS
$BODY$
DECLARE
trsp_sql TEXT;
restrictions_sql TEXT;
with_reverse_cost TEXT;
no_reverse_cost TEXT;
k integer;
directed TEXT;
msg TEXT;
parameters TEXT;
BEGIN

  IF NOT min_version('3.4.0') THEN
    RETURN QUERY SELECT skip(1, 'New signatures added on 3.4.0');
    RETURN;
  END IF;

  IF min_lib_version('4.0.0') and NOT min_version('3.6.0') THEN
    RETURN QUERY SELECT skip(1, 'Internal function __v4trsp deprecated on 3.6.0 deleted on 4.0.0');
    RETURN;
  END IF;

  directed = 'Undirected';
  IF flag THEN directed = 'Directed'; END IF;

  k := 1;
  with_reverse_cost = quote_literal('with_reverse');
  no_reverse_cost = quote_literal('no_reverse');
  restrictions_sql = quote_literal('restriction');

  FOR i IN 1.. cant LOOP

    parameters = restrictions_sql || ', ' || i || ', ' || i || ', ' || flag;

    trsp_sql := 'SELECT * from pgr_trsp( ' || with_reverse_cost || ', ' || parameters || ')';
      msg := k || ' ' || trsp_sql;
      EXECUTE trsp_sql;
      RETURN query SELECT is_empty(trsp_sql, msg);
      k := k + 1;

      trsp_sql := 'SELECT * from pgr_trsp( ' || no_reverse_cost || ', ' || parameters || ')';
      msg := k || ' ' || trsp_sql;
      EXECUTE trsp_sql;
      RETURN query SELECT is_empty(trsp_sql, msg);
      k := k + 1;

  END LOOP;

END
$BODY$
language plpgsql;

SELECT * from edge_cases(18, true);
SELECT * from edge_cases(18, false);

SELECT * FROM finish();
ROLLBACK;

