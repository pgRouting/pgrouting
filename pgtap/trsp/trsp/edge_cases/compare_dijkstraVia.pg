/*PGR-GNU*****************************************************************

Copyright (c) 2018  pgRouting developers
Mail: project@pgrouting.org

------
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 ********************************************************************PGR-GNU*/
BEGIN;

SET extra_float_digits=-3;
UPDATE edges SET cost = sign(cost) + 0.001 * id * id, reverse_cost = sign(reverse_cost) + 0.001 * id * id;

SELECT CASE WHEN min_version('3.4.0') THEN plan(6) ELSE plan(1) END;

PREPARE related_restriction AS SELECT 100.2 AS cost, ARRAY[4,8] AS path;
PREPARE unrelated_restriction AS SELECT 100 AS cost, ARRAY[33, 32, 25] AS path;

CREATE OR REPLACE FUNCTION edge_cases()
RETURNS SETOF TEXT AS
$BODY$
BEGIN

  IF NOT min_version('3.4.0') THEN
    RETURN QUERY SELECT skip(1, 'pgr_signature added on 3.4.0');
    RETURN;
  END IF;

  /* Directed */
  PREPARE q1 AS
  SELECT * from pgr_trsp(
    'SELECT  id, source, target, cost, reverse_cost from edges',
    $$SELECT 100 AS cost, ARRAY[33, 32, 25] AS path$$,
    5, 5, true);

  RETURN QUERY SELECT is_empty('q1', 'Directed: No path from 5 to 5');

  PREPARE q21 AS
  SELECT seq, node, edge, cost from pgr_trsp(
    'SELECT  id, source, target, cost, reverse_cost from edges',
    'unrelated_restriction',
    5, 10, true);

  PREPARE q21_expected AS
  SELECT seq, node, edge, cost from pgr_dijkstra(
    'SELECT  id, source, target, cost, reverse_cost from edges',
    5, 10, true);

  RETURN QUERY SELECT set_eq('q21','q21_expected','Directed: without retrictions expected the same as pgr_dijkstra');

  PREPARE q31 AS
  SELECT seq-1, node, edge, cost::TEXT FROM pgr_trsp(
    'SELECT  id, source, target, cost, reverse_cost from edges',
    'related_restriction',
    5, 10, true);

  PREPARE q31_expected AS
  SELECT (row_number() over() -1), node, CASE WHEN edge = -2 THEN -1 ELSE edge END, cost::TEXT
  FROM pgr_dijkstraVia(
    'select  id, source, target, cost, reverse_cost from edges',
    ARRAY[5, 8, 17, 15, 10],
    true) WHERE edge != -1;


  RETURN QUERY SELECT set_eq('q31','q31_expected','Directed: with retrictions expected the same as pgr_dijkstraVia');

  /* Undirected */
  PREPARE q41 AS
  SELECT * from pgr_trsp(
    'SELECT  id, source, target, cost, reverse_cost from edges',
    'unrelated_restriction',
    5, 5, false);
  RETURN QUERY SELECT is_empty('q41', '5: Undirected: No path from 5 to 5');

  PREPARE q51 AS
  SELECT seq, node, edge, cost::text from pgr_trsp(
    'SELECT  id, source, target, cost, reverse_cost from edges',
    'unrelated_restriction',
    5, 10, false);

  PREPARE q51_expected AS
  SELECT seq, node, edge, cost::text from pgr_dijkstra(
    'SELECT  id, source, target, cost, reverse_cost from edges',
    5, 10, false);

  RETURN QUERY SELECT set_eq('q51','q51_expected','6: Undirected: without retrictions returns the same as pgr_dijkstra');

  PREPARE q61 AS
  SELECT seq-1, node, edge, cost::TEXT from pgr_trsp(
    'SELECT  id, source, target, cost, reverse_cost from edges',
    'related_restriction',
    5, 10, false);

  PREPARE q61_expected AS
  SELECT (row_number() over() -1), node,
  (CASE WHEN edge = -2 THEN -1 ELSE edge END), cost::text
  FROM pgr_dijkstraVia(
    'select  id, source, target, cost, reverse_cost from edges',
    ARRAY[5, 6, 10],
    false) WHERE edge != -1;

  RETURN QUERY SELECT set_eq('q61','q61_expected','7: Undirected: with retrictions returns expected path');
END;
$BODY$
LANGUAGE plpgsql;

SELECT edge_cases();

SELECT finish();
ROLLBACK;
