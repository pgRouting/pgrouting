BEGIN;

SELECT plan(7);

UPDATE edge_table SET cost = sign(cost) + 0.001 * id * id, reverse_cost = sign(reverse_cost) + 0.001 * id * id;

CREATE OR REPLACE FUNCTION edge_cases()
RETURNS SETOF TEXT AS
$BODY$
BEGIN


  PREPARE q1 AS
  SELECT * from pgr_trsp(
    'SELECT  id::INTEGER, source::INTEGER, target::INTEGER, cost, reverse_cost from edge_table',
    $$SELECT 100::float AS to_cost, 25::INTEGER AS target_id, '32, 33'::TEXT AS via_path$$,
    1, 1,
    true);

  PREPARE q2 AS
  SELECT * from pgr_trsp(
    'SELECT  id::INTEGER, source::BIGINT, target::INTEGER, cost, reverse_cost from edge_table',
    $$SELECT 100::float AS to_cost, 25::INTEGER AS target_id, '32, 33'::TEXT AS via_path$$,
    1, 3,
    true);

  PREPARE q21 AS
  SELECT seq, node, edge,   round(cost::numeric, 3) from pgr_trsp(
    'SELECT  id::INTEGER, source::INTEGER, target::INTEGER,cost, reverse_cost from edge_table',
    $$SELECT 100::float AS to_cost, 25::INTEGER AS target_id, '32, 33'::TEXT AS via_path$$,
    1, 3,
    true);

  PREPARE q22 AS
  SELECT seq-1, node::INTEGER, edge::INTEGER, round(cost::numeric, 3) from pgr_dijkstra(
    'SELECT  id::INTEGER, source::INTEGER, target::INTEGER,cost, reverse_cost from edge_table',
    1, 3, true);

  PREPARE q31 AS
  SELECT seq, node, edge, round(cost::numeric, 3) from pgr_trsp(
    'SELECT  id::INTEGER, source::INTEGER, target::INTEGER,cost, reverse_cost from edge_table',
    'SELECT 8::INTEGER as target_id, ''4''::TEXT as via_path,  100.2::FLOAT to_cost',
    1, 3,
    true);

  PREPARE q32 AS
  SELECT (row_number() over() -1)::INTEGER, node::INTEGER,
  (CASE WHEN edge = -2 THEN -1 ELSE edge END)::INTEGER, round(cost::numeric, 3)
  FROM pgr_dijkstraVia(
    'SELECT  id, source, target, cost, reverse_cost from edge_table',
    ARRAY[1, 10, 12, 4, 3],
    true) where edge != -1;


  PERFORM todo('C code should take care of calling dijkstra',1);
  RETURN QUERY SELECT is_empty('q1', '1: Directed: No path from 1 to 1');
  RETURN QUERY SELECT lives_ok('q2', 'ANY_INTEGER and ANY_NUMERICAL are accepted');

  RETURN QUERY SELECT set_eq('q21','q22','3: Directed: without retrictions returns the same as pgr_dijkstra');
  RETURN QUERY SELECT set_eq('q31','q32','4: Directed: with retrictions returns expected path');




  PREPARE q41 AS
  SELECT * from pgr_trsp(
    'SELECT  id::INTEGER, source::INTEGER, target::INTEGER,cost, reverse_cost from edge_table',
    $$SELECT 100::float AS to_cost, 25::INTEGER AS target_id, '32, 33'::TEXT AS via_path$$,
    1, 1,
    FALSE);

  PREPARE q51 AS
  SELECT seq, node, edge, cost::text from pgr_trsp(
    'SELECT  id::INTEGER, source::INTEGER, target::INTEGER,cost, reverse_cost from edge_table',
    $$SELECT 100::float AS to_cost, 25::INTEGER AS target_id, '32, 33'::TEXT AS via_path$$,
    1, 3,
    FALSE);

  PREPARE q52 AS
  SELECT seq-1, node::INTEGER, edge::INTEGER, cost::text from pgr_dijkstra(
    'SELECT  id::INTEGER, source::INTEGER, target::INTEGER,cost, reverse_cost from edge_table',
    1, 3, FALSE);

  PREPARE q61 AS
  SELECT seq, node, edge, cost::text from pgr_trsp(
    'SELECT  id::INTEGER, source::INTEGER, target::INTEGER,cost, reverse_cost from edge_table',
    'SELECT 8::INTEGER as target_id, ''4''::TEXT as via_path,  100.2::FLOAT to_cost',
    1, 3,
    FALSE);

  PREPARE q62 AS
  SELECT (row_number() over() -1)::INTEGER, node::INTEGER,
  (CASE WHEN edge = -2 THEN -1 ELSE edge END)::INTEGER, cost::text
  FROM pgr_dijkstraVia(
    'SELECT  id::INTEGER, source::INTEGER, target::INTEGER, cost, reverse_cost from edge_table',
    ARRAY[1, 2, 3],
    FALSE) where edge != -1;


  PERFORM todo('C code should take care of calling dijkstra',1);
  RETURN QUERY SELECT is_empty('q41', '5: Undirected: No path from 1 to 1');
  RETURN QUERY SELECT set_eq('q51','q52','6: Undirected: without retrictions returns the same as pgr_dijkstra');

  RETURN QUERY SELECT set_eq('q61','q62','7: Undirected: with retrictions returns expected path');
END;
$BODY$
LANGUAGE plpgsql;

SELECT edge_cases();

SELECT finish();
ROLLBACK;
