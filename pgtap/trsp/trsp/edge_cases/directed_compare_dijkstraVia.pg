
/*PGR-GNU*****************************************************************

Copyright (c) 2018  pgRouting developers
Mail: project@pgrouting.org

------
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 ********************************************************************PGR-GNU*/
BEGIN;

SELECT plan(3);

UPDATE edge_table SET cost = sign(cost) + 0.001 * id * id, reverse_cost = sign(reverse_cost) + 0.001 * id * id;


CREATE OR REPLACE FUNCTION edge_case() RETURNS SETOF TEXT AS
$BODY$
BEGIN

  IF min_version('3.4.0') THEN
    PREPARE q1 AS
    SELECT * from pgr_trsp(
      'select id, source, target,cost, reverse_cost from edge_table',
      $$SELECT 1 AS id, 100::float AS cost, 25::INTEGER AS target_id, ARRAY[33, 32, 25] AS path$$,
      1, 1,
      true);

    PREPARE q21 AS
    SELECT seq, node, edge, round(cost::numeric, 12) from pgr_trsp(
      'select id, source, target,cost, reverse_cost from edge_table',
      $$SELECT 1 AS id, 100::float AS cost, 25::INTEGER AS target_id, ARRAY[33, 32, 25] AS path$$,
      3, 4,
      true);

    PREPARE q22 AS
    SELECT seq, node, edge, round(cost::numeric, 12) from pgr_dijkstra(
      'select id, source, target, cost, reverse_cost from edge_table',
      3, 4);

    PREPARE q31 AS
    SELECT seq-1::INTEGER, node::INTEGER, edge::INTEGER, round(cost::numeric, 12) from pgr_trsp(
      'select id, source, target, cost, reverse_cost from edge_table',
      $$SELECT 1 AS id, 100.2::float AS cost, ARRAY[5,9] AS path$$,
      3, 4,
      true);

  ELSE

    PREPARE q1 AS
    SELECT * from pgr_trsp(
      'select id::INTEGER, source::INTEGER, target::INTEGER,cost, reverse_cost from edge_table',
      1, 1,
      true, true);

    PREPARE q21 AS
    SELECT seq, id1, id2, round(cost::numeric, 12) from pgr_trsp(
      'select id::INTEGER, source::INTEGER, target::INTEGER,cost, reverse_cost from edge_table',
      3, 4,
      true, true);

    PREPARE q22 AS
    SELECT seq-1, node::INTEGER, edge::INTEGER, round(cost::numeric, 12) from pgr_dijkstra(
      'select id, source, target, cost, reverse_cost from edge_table',
      3, 4, true);

    PREPARE q31 AS
    SELECT seq, id1, id2, round(cost::numeric, 12) from pgr_trsp(
      'select id::INTEGER, source::INTEGER, target::INTEGER, cost, reverse_cost from edge_table',
      3, 4,
      true, true,
      'select 9::INTEGER as target_id, ''5''::TEXT as via_path,  100.2::FLOAT to_cost');

  END IF;

  PREPARE q32 AS
  SELECT (row_number() over() -1)::INTEGER, node::INTEGER,
  (CASE WHEN edge = -2 THEN -1 ELSE edge END)::INTEGER, round(cost::numeric, 12)
  FROM pgr_dijkstraVia(
    'select id, source, target, cost, reverse_cost from edge_table',
    ARRAY[3, 2, 4],
    true) where edge != -1;

  RETURN QUERY SELECT is_empty('q1', '1: No path from 1 to 1');
  RETURN QUERY SELECT set_eq('q21','q22','2: without retrictions returns the same as pgr_dijkstra');
  RETURN QUERY SELECT set_eq('q31','q32','3: with retrictions returns expected path');

END;
$BODY$
LANGUAGE plpgsql;

SELECT edge_case();

SELECT finish();
ROLLBACK
