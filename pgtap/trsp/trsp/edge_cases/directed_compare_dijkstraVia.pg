BEGIN;

SELECT plan(3);

UPDATE edge_table SET cost = sign(cost) + 0.001 * id * id, reverse_cost = sign(reverse_cost) + 0.001 * id * id;


PREPARE q1 AS
SELECT * from pgr_trsp(
    'select id, source, target,cost, reverse_cost from edge_table',
    $$SELECT 1 AS id, 100::float AS cost, 25::INTEGER AS target_id, ARRAY[33, 32, 25] AS path$$,
    1, 1,
    true);

PREPARE q21 AS
SELECT seq, node, edge, round(cost::numeric, 12) from pgr_trsp(
    'select id, source, target,cost, reverse_cost from edge_table',
    $$SELECT 1 AS id, 100::float AS cost, 25::INTEGER AS target_id, ARRAY[33, 32, 25] AS path$$,
    3, 4,
    true);

PREPARE q22 AS
SELECT seq, node, edge, round(cost::numeric, 12) from pgr_dijkstra(
    'select id, source, target, cost, reverse_cost from edge_table',
    3, 4);

PREPARE q31 AS
SELECT node, edge, round(cost::numeric, 12) from pgr_trsp(
    'select id, source, target, cost, reverse_cost from edge_table',
    $$SELECT 1 AS id, 100.2::float AS cost, ARRAY[5,9] AS path$$,
    3, 4,
    true);

PREPARE q32 AS
SELECT node,
(CASE WHEN edge = -2 THEN -1 ELSE edge END), round(cost::numeric, 12)
FROM pgr_dijkstraVia(
    'select id, source, target, cost, reverse_cost from edge_table',
    ARRAY[3, 2, 4],
    true) where edge != -1;


SELECT todo('C code should take care of calling dijkstra',1);
SELECT is_empty('q1', '1: No path from 1 to 1');
SELECT set_eq('q21','q22','2: without retrictions returns the same as pgr_dijkstra');
SELECT set_eq('q31','q32','3: with retrictions returns expected path');

-- Finish the tests and clean up.

SELECT * FROM finish();


ROLLBACK
