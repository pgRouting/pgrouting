
/*PGR-GNU*****************************************************************

Copyright (c) 2018  pgRouting developers
Mail: project@pgrouting.org

------
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 ********************************************************************PGR-GNU*/
BEGIN;

SELECT CASE WHEN min_version('3.4.0') THEN plan(68) ELSE plan(1) END;
SET extra_float_digits = -3;
UPDATE edge_table SET cost = sign(cost) + 0.001 * id * id, reverse_cost = sign(reverse_cost) + 0.001 * id * id;

CREATE or REPLACE FUNCTION compareDijkstra(cant INTEGER default 17)
RETURNS SETOF TEXT AS
$BODY$
DECLARE
inner_sql TEXT;
points TEXT;
empty_restrictions TEXT;
with_reverse TEXT;
no_reverse TEXT;
points_sql TEXT;
trsp_sql TEXT;
result_columns TEXT;
result_columns_vid TEXT;
arr TEXT;
BEGIN
  IF NOT min_version('3.4.0') THEN
    RETURN QUERY SELECT skip(1, 'Signature added on 3.4.0');
    RETURN;
  END IF;

  result_columns := 'seq, end_vid, node, edge, cost, agg_cost';
  result_columns_vid := 'seq, end_pid AS end_vid, node, edge, cost, agg_cost';
  points := 'SELECT * FROM pointsofinterest';
  empty_restrictions := 'SELECT * FROM restrictions WHERE id > 10';
  with_reverse := 'SELECT * FROM edge_table';
  no_reverse := 'SELECT id, source, target, cost FROM edge_table';
  arr := 'ARRAY[1,2,3,4,5,6,7,8]';

  FOR i IN 1.. cant LOOP
    points_sql := 'SELECT ' || result_columns_vid || ' FROM pgr_withpoints($$' || with_reverse || '$$, $$' || points || '$$, '
      || i || ', ' || arr || ', directed => true)';
    trsp_sql := 'SELECT ' || result_columns || ' FROM pgr_trsp_withPoints($$' || with_reverse || '$$, $$'
      || empty_restrictions || '$$, $$' || points || '$$, '
      || i || ', ' || arr || ', directed => true)';
    RETURN query SELECT set_eq(trsp_sql, points_sql, trsp_sql);

    points_sql := 'SELECT ' || result_columns_vid || ' FROM pgr_withpoints($$' || with_reverse || '$$, $$' || points || '$$, '
      || i || ', ' || arr || ', directed => false)';
    trsp_sql := 'SELECT ' || result_columns || ' FROM pgr_trsp_withPoints($$' || with_reverse || '$$, $$'
      || empty_restrictions || '$$, $$' || points || '$$, '
      || i || ', ' || arr || ', directed => false)';
    RETURN query SELECT set_eq(trsp_sql, points_sql, trsp_sql);

    points_sql := 'SELECT ' || result_columns_vid || ' FROM pgr_withpoints($$' || no_reverse || '$$, $$' || points || '$$, '
      || i || ', ' || arr || ', directed => true)';
    trsp_sql := 'SELECT ' || result_columns || ' FROM pgr_trsp_withPoints($$' || no_reverse || '$$, $$'
      || empty_restrictions || '$$, $$' || points || '$$, '
      || i || ', ' || arr || ', directed => true)';
    RETURN query SELECT set_eq(trsp_sql, points_sql, trsp_sql);

    points_sql := 'SELECT ' || result_columns_vid || ' FROM pgr_withpoints($$' || no_reverse || '$$, $$' || points || '$$, '
      || i || ', ' || arr || ', directed => false)';
    trsp_sql := 'SELECT ' || result_columns || ' FROM pgr_trsp_withPoints($$' || no_reverse || '$$, $$'
      || empty_restrictions || '$$, $$' || points || '$$, '
      || i || ', ' || arr || ', directed => false)';
    RETURN query SELECT set_eq(trsp_sql, points_sql, trsp_sql);

END LOOP;

RETURN;
END
$BODY$
language plpgsql;

SELECT * from compareDijkstra();


SELECT * FROM finish();
ROLLBACK;

