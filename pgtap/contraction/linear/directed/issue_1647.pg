
/*PGR-GNU*****************************************************************

Copyright (c) 2018  pgRouting developers
Mail: project@pgrouting.org

------
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 ********************************************************************PGR-GNU*/
BEGIN;

UPDATE edge_table SET cost = sign(cost), reverse_cost = sign(reverse_cost);

SELECT CASE WHEN NOT min_version('3.1.1') THEN plan(1) ELSE plan(4) END;

CREATE OR REPLACE FUNCTION issue_check()
RETURNS SETOF TEXT AS
$BODY$
BEGIN

IF NOT min_version('3.1.1') THEN
  RETURN QUERY SELECT skip(1,'Issue fixed on 3.1.1');
  RETURN;
END IF;

PREPARE allgraph AS
SELECT type, id, contracted_vertices, source, target, cost
FROM pgr_contraction(
    $$SELECT * FROM edge_table$$,
    ARRAY[2]::INTEGER[], 1, ARRAY[]::INTEGER[], true);

PREPARE minigraph AS
SELECT type, id, contracted_vertices, source, target, cost
FROM pgr_contraction(
    $$SELECT * FROM edge_table WHERE source IN(1,2) OR target IN(1,2)$$,
    ARRAY[2]::INTEGER[], 1, ARRAY[]::INTEGER[], true);

RETURN QUERY
SELECT lives_ok('allgraph', 'allgraph QUERY 1: Graph with no loop cycle');
RETURN QUERY
SELECT lives_ok('minigraph', 'minigraph QUERY 1: Graph with no loop cycle');

INSERT INTO edge_table (source, target, cost, reverse_cost) VALUES
(1, 1, 1, 1);

RETURN QUERY
SELECT lives_ok('allgraph', 'allgraph QUERY 1: Graph with no loop cycle');
RETURN QUERY
SELECT lives_ok('minigraph', 'minigraph QUERY 1: Graph with no loop cycle');

END;
$BODY$
LANGUAGE plpgsql;

SELECT issue_check();
SELECT finish();
DELETE FROM edge_table WHERE id > 18;
ROLLBACK;
