
/*PGR-GNU*****************************************************************

Copyright (c) 2018  pgRouting developers
Mail: project@pgrouting.org

------
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 ********************************************************************PGR-GNU*/
BEGIN;

SELECT plan(333);

UPDATE edges SET cost = sign(cost) + 0.001 * id * id, reverse_cost = sign(reverse_cost) + 0.001 * id * id;

--step 1: Initial tables

SELECT isnt_empty($$SELECT id, source, target, cost, reverse_cost FROM edges$$);
SELECT isnt_empty($$SELECT id FROM vertices$$);


-- add extra columns to the edges and vertices table
ALTER TABLE edges
ADD is_contracted BOOLEAN DEFAULT false,
ADD contracted_vertices integer[];

ALTER TABLE vertices
ADD is_contracted BOOLEAN DEFAULT false,
ADD contracted_vertices integer[];

SELECT has_column('edges', 'is_contracted');
SELECT has_column('vertices', 'is_contracted');
SELECT has_column('edges', 'contracted_vertices');
SELECT has_column('vertices', 'contracted_vertices');

SELECT * INTO contraction_info FROM pgr_contraction(
    'SELECT id, source, target, cost, reverse_cost FROM edges',
    ARRAY[1]::integer[], 1, ARRAY[]::BIGINT[], true);

PREPARE c_info AS
SELECT type, id, contracted_vertices, source, target, cost
FROM (VALUES
    ('v'::CHAR, 6::BIGINT, ARRAY[5]::BIGINT[], -1::BIGINT, -1::BIGINT, -1::FLOAT),
    ('v', 7, ARRAY[1,3], -1, -1, -1),
    ('v', 8, ARRAY[9], -1, -1, -1),
    ('v', 4, ARRAY[2], -1, -1, -1),
    ('v', 14, ARRAY[13], -1, -1, -1)
) AS t(type, id, contracted_vertices, source, target, cost );

SELECT set_eq($$SELECT * FROM contraction_info$$, 'c_info');


UPDATE vertices
    SET contracted_vertices = result.contracted_vertices
FROM contraction_info AS result
WHERE result.type = 'v' AND result.id = vertices.id;

UPDATE vertices
    SET is_contracted = true
FROM (SELECT unnest(contracted_vertices) AS id FROM contraction_info WHERE type = 'v') AS result
WHERE result.id = vertices.id;

SELECT set_eq($$SELECT id
    FROM vertices
    WHERE NOT is_contracted$$,
    $$SELECT unnest(ARRAY[4,6,7,8,10,11,12,14,15,16,17])$$
);

SELECT set_eq($$SELECT id
    FROM vertices
    WHERE is_contracted$$,
    $$SELECT unnest(ARRAY[1,2,3,5,9,13])$$
);


CREATE OR REPLACE FUNCTION compare_dijkstra(
    BIGINT, BIGINT)
RETURNS SETOF TEXT AS
$BODY$
BEGIN
    CREATE TEMP TABLE dijkstra_contracted AS
    SELECT * FROM pgr_dijkstra(
        format($query$
            WITH
            contracted_section AS (
                SELECT unnest(contracted_vertices) AS id
                FROM vertices
                WHERE ARRAY[%1$s, %2$s] && contracted_vertices
            ),
            vertices AS (
                SELECT id FROM vertices
                WHERE NOT is_contracted OR id IN (SELECT id FROM contracted_section)
            )
            SELECT id, source, target, cost, reverse_cost FROM edges
            WHERE
            EXISTS (SELECT id FROM vertices WHERE vertices.id = edges.source)
            AND
            EXISTS (SELECT id FROM vertices WHERE vertices.id = edges.target)
            $query$, $1::BIGINT, $2::BIGINT),
        $1::BIGINT, $2::BIGINT);

    CREATE TEMP TABLE dijkstra_normal AS
    SELECT * FROM pgr_dijkstra($$SELECT id, source, target, cost, reverse_cost FROM edges$$, $1::BIGINT, $2::BIGINT);

    RETURN QUERY
    SELECT set_eq(
        $$SELECT * FROM dijkstra_contracted$$,
        $$SELECT * FROM dijkstra_normal$$);

    DROP TABLE dijkstra_contracted;
    DROP TABLE dijkstra_normal;
END
$BODY$
LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION compare_dijkstra_all()
RETURNS SETOF TEXT AS
$BODY$
DECLARE
    i INTEGER;
    j INTEGER;

BEGIN
    FOR i IN 1..18 LOOP
        FOR j IN 1..18 LOOP
            RETURN QUERY
            SELECT compare_dijkstra(i, j);
        END LOOP;
    END LOOP;
END
$BODY$
LANGUAGE plpgsql;

SELECT compare_dijkstra_all();
SELECT finish();
ROLLBACK;
