/*PGR-GNU*****************************************************************

Copyright (c) 2018  pgRouting developers
Mail: project@pgrouting.org

------
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 ********************************************************************PGR-GNU*/
BEGIN;

UPDATE edges SET cost = sign(cost), reverse_cost = sign(reverse_cost);
SELECT CASE WHEN min_version('3.8.0') THEN plan(128) ELSE plan(1) END;

CREATE TABLE graphs (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    source BIGINT,
    target BIGINT,
    cost BIGINT default 1,
    reverse_cost BIGINT default 1,
    dead_case INTEGER
);

/* 2 -- {3 -- 4} ; 3 -- 4 */
INSERT INTO graphs(source, target, dead_case)
VALUES
(2, 3, 0),
(2, 4, 0),
(3, 4, 0);

INSERT INTO graphs(source, target, cost, reverse_cost, dead_case)
VALUES
/* 2->{3->4 [dir=both]} [dir=both]; 1->2 */
(1, 2, 1, -1, 1),

/* 2->{3->4 [dir=both]} [dir=both]; 2->1 */
(2, 1, 1, -1, 2),

/* 2->{3->4 [dir=both]} [dir=both]; 2->1 [dir=both] */
(1, 2, 1, 1, 3),

/* 2->{3->4 [dir=both]} [dir=both]; 2->1,2->1 */
(2, 1, 1, -1, 4),
(2, 1, 1, -1, 4),

/* 2->{3->4 [dir=both]} [dir=both]; {2,3}->1 */
(2, 1, 1, -1, 5),
(3, 1, 1, -1, 5),

/* 2->{3->4 [dir=both]} [dir=both]; 2->1;2->1;3->1 */
(2, 1, 1, -1, 6),
(2, 1, 1, -1, 6),
(3, 1, 1, -1, 6);

CREATE TABLE results (
    type text,
    id INTEGER,
    contracted_vertices BIGINT[],
    result_case INTEGER
);

INSERT INTO results(type, id, contracted_vertices, result_case)
VALUES
('v',6,ARRAY[5]::BIGINT[], 1),
('v',5,ARRAY[6], 2),
('v',15,ARRAY[10], 3),
('v',10,ARRAY[15], 4),
('v',12,ARRAY[8], 5),
('v',8,ARRAY[12], 6),
('v',15,ARRAY[6,10], 7),
('v',6,ARRAY[10,15], 8),
('v',10,ARRAY[6,15], 9),
('v',10,ARRAY[15], 10),
('v',10,ARRAY[6], 11),
('v',8,ARRAY[11,12], 12),
('v',8,ARRAY[12], 13),
('v',11,ARRAY[12], 13),
('v',11,ARRAY[8,12], 113),
('v',12,ARRAY[8,11], 14),
('v',12,ARRAY[11], 15),

('v',10,ARRAY[6], 16),
('v',12,ARRAY[8], 16),
('v',6,ARRAY[10], 17),
('v',12,ARRAY[8], 17),
('v',10,ARRAY[6], 18),
('v',8,ARRAY[12], 18),
('v',6,ARRAY[10], 19),
('v',8,ARRAY[12], 19),
('v',6,ARRAY[10], 20),

('v',17,ARRAY[10,11,12], 21),
('v',10,ARRAY[11,12,17], 22),
('v',11,ARRAY[10,12,17], 23),
('v',12,ARRAY[10,11,17], 24),

('v',8,ARRAY[9], 25),
('v',7,ARRAY[1,3], 25),
('v',6,ARRAY[5], 25),

('v',8,ARRAY[9], 26),
('v',3,ARRAY[1], 26),
('v',6,ARRAY[5], 26)

;

prepare get_solution(integer, integer, text) AS
WITH a AS (SELECT CASE WHEN $3::BOOLEAN THEN $1 ELSE $2 END r)
SELECT type,id,contracted_vertices FROM results, a WHERE result_case = r;

CREATE OR REPLACE FUNCTION edge_cases_sampledata(directed text)
RETURNS SETOF TEXT AS
$BODY$
BEGIN

  -- SINGLE edge

  RETURN QUERY
  SELECT set_eq($$"graph1" ('1','{}',$$||directed||$$)$$, $$"get_solution" (1,1,$$||directed||$$)$$, '5 <=> 6: Directed=' || directed ||', no forbidden vertices');
  RETURN QUERY
  SELECT set_eq($$"graph1" ('1','{6}',$$||directed||$$)$$, $$"get_solution" (1,1,$$||directed||$$) $$, '5 <=> 6: Directed=' || directed ||', forbid 5');
  RETURN QUERY
  SELECT set_eq($$"graph1" ('1','{5}',$$||directed||$$)$$, $$"get_solution" (2,2,$$||directed||$$)$$, '5 <=> 6: Directed=' || directed ||', forbid 6');
  RETURN QUERY
  SELECT is_empty($$"graph1" ('1','{5,6}',$$||directed||$$)$$, '5 <=> 6: Directed=' || directed ||', forbid 5,6');

  RETURN QUERY
  SELECT set_eq($$"graph1" ('3','{}',$$||directed||$$)$$, $$"get_solution" (3,3,$$||directed||$$)  $$, '10 -> 15: Directed=' || directed ||', no forbidden vertices');
  RETURN QUERY
  SELECT set_eq($$"graph1" ('3','{10}',$$||directed||$$)$$, $$"get_solution" (4,4,$$||directed||$$) $$, '10 -> 15: Directed=' || directed ||', forbid 10');
  RETURN QUERY
  SELECT set_eq($$"graph1" ('3','{15}',$$||directed||$$)$$, $$"get_solution" (3,3,$$||directed||$$) $$, '10 -> 15: Directed=' || directed ||', forbid 15');
  RETURN QUERY
  SELECT is_empty($$"graph1" ('3','{10,15}',$$||directed||$$) $$, '5 <=> 6: Directed=' || directed ||', forbid 10,15');

  RETURN QUERY
  SELECT set_eq($$"graph1" ('12','{}',$$||directed||$$)$$, $$"get_solution" (5,5,$$||directed||$$) $$, '8 -> 12: Directed=' || directed ||', no forbidden vertices');
  RETURN QUERY
  SELECT set_eq($$"graph1" ('12','{8}',$$||directed||$$)$$, $$"get_solution" (6,6,$$||directed||$$) $$, '8 -> 12: Directed=' || directed ||', forbid 8');
  RETURN QUERY
  SELECT set_eq($$"graph1" ('12','{12}',$$||directed||$$)$$, $$"get_solution" (5,5,$$||directed||$$) $$, '8 -> 12: Directed=' || directed ||', forbid 12');

  -- TWO edges

  RETURN QUERY
  SELECT set_eq($$"graph1" ('2,3','{}',$$||directed||$$)$$, $$"get_solution" (7,7,$$||directed||$$) $$, '15 -> 10 -> 6: Directed=' || directed ||', no forbidden vertices');
  RETURN QUERY
  SELECT set_eq($$"graph1" ('2,3','{6}',$$||directed||$$)$$, $$"get_solution" (8,8,$$||directed||$$) $$, '15 -> 10 -> 6: Directed=' || directed ||', forbid 6');
  RETURN QUERY
  SELECT set_eq($$"graph1" ('2,3','{10}',$$||directed||$$)$$, $$"get_solution" (9,9,$$||directed||$$) $$, '15 -> 10 -> 6: Directed=' || directed ||', forbid 10');
  RETURN QUERY
  SELECT set_eq($$"graph1" ('2,3','{15}',$$||directed||$$)$$, $$"get_solution" (7,7,$$||directed||$$) $$, '15 -> 10 -> 6: Directed=' || directed ||', forbid 15');
  RETURN QUERY
  SELECT set_eq($$"graph1" ('2,3','{6,10}',$$||directed||$$)$$, $$"get_solution" (10,10,$$||directed||$$) $$, '15 -> 10 -> 6: Directed=' || directed ||', forbid 6,10');
  RETURN QUERY
  SELECT is_empty($$"graph1" ('2,3','{6,15}',$$||directed||$$)$$, '15 -> 10 -> 6: Directed=' || directed ||', forbid 6,15');
  RETURN QUERY
  SELECT set_eq($$"graph1" ('2,3','{10,15}',$$||directed||$$)$$, $$"get_solution" (11,11,$$||directed||$$) $$, '15 -> 10 -> 6: Directed=' || directed ||', forbid 10,15');
  RETURN QUERY
  SELECT is_empty($$"graph1" ('2,3','{6,10,15}',$$||directed||$$)$$, '15 -> 10 -> 6: Directed=' || directed ||', forbid 6,10,15');


  RETURN QUERY
  SELECT set_eq($$"graph1" ('11,12','{}',$$||directed||$$)$$, $$"get_solution" (12,12,$$||directed||$$) $$, '11 -> 12 <- 8: Directed=' || directed ||', no forbidden vertices');
  RETURN QUERY
  SELECT set_eq($$"graph1" ('11,12','{8}',$$||directed||$$)$$, $$"get_solution" (12,12,$$||directed||$$) $$, '11 -> 12 <- 8: Directed=' || directed ||', forbid 8');
  RETURN QUERY
  SELECT set_eq($$"graph1" ('11,12','{11}',$$||directed||$$)$$, $$"get_solution" (13,113,$$||directed||$$) $$, '11 -> 12 <- 8: Directed=' || directed ||', forbid 11');
  RETURN QUERY
  SELECT set_eq($$"graph1" ('11,12','{12}',$$||directed||$$)$$, $$"get_solution" (14,14,$$||directed||$$) $$, '11 -> 12 <- 8: Directed=' || directed ||', forbid 12');
  RETURN QUERY
  SELECT set_eq($$"graph1" ('11,12','{8,11}',$$||directed||$$)$$, $$"get_solution" (13,213,$$||directed||$$) $$, '11 -> 12 <- 8: Directed=' || directed ||', forbid 8,11');
  RETURN QUERY
  SELECT set_eq($$"graph1" ('11,12','{8,12}',$$||directed||$$)$$, $$"get_solution" (15,15,$$||directed||$$) $$, '11 -> 12 <- 8: Directed=' || directed ||', forbid 8,12');
  RETURN QUERY
  SELECT set_eq($$"graph1" ('11,12','{11,12}',$$||directed||$$)$$, $$"get_solution" (5,5,$$||directed||$$) $$, '11 -> 12 <- 8: Directed=' || directed ||', forbid 11,12');
  RETURN QUERY
  SELECT is_empty($$"graph1" ('11,12','{8,11,12}',$$||directed||$$)$$, '11 -> 12 <- 8: Directed=' || directed ||', forbid 8,11,12');


  RETURN QUERY
  SELECT set_eq($$"graph1" ('2,12','{}',$$||directed||$$)$$, $$"get_solution" (16,16,$$||directed||$$) $$, '10 -> 6, 8 -> 12: Directed=' || directed ||', no forbidden vertices');
  RETURN QUERY
  SELECT set_eq($$"graph1" ('2,12','{6}',$$||directed||$$)$$, $$"get_solution" (17,17,$$||directed||$$)  $$, '10 -> 6, 8 -> 12: Directed=' || directed ||', forbid 6');
  RETURN QUERY
  SELECT set_eq($$"graph1" ('2,12','{8}',$$||directed||$$)$$, $$"get_solution" (18,18,$$||directed||$$)  $$, '10 -> 6, 8 -> 12: Directed=' || directed ||', forbid 8');
  RETURN QUERY
  SELECT set_eq($$"graph1" ('2,12','{10}',$$||directed||$$)$$, $$"get_solution" (16,16,$$||directed||$$)  $$, '10 -> 6, 8 -> 12: Directed=' || directed ||', forbid 10');
  RETURN QUERY
  SELECT set_eq($$"graph1" ('2,12','{12}',$$||directed||$$)$$, $$"get_solution" (16,16,$$||directed||$$)  $$, '10 -> 6, 8 -> 12: Directed=' || directed ||', forbid 12');
  RETURN QUERY
  SELECT set_eq($$"graph1" ('2,12','{6,8}',$$||directed||$$)$$, $$"get_solution" (19,19,$$||directed||$$)  $$, '10 -> 6, 8 -> 12: Directed=' || directed ||', forbid 6,8');
  RETURN QUERY
  SELECT set_eq($$"graph1" ('2,12','{6,10}',$$||directed||$$)$$, $$"get_solution" (5,5,$$||directed||$$) $$, '10 -> 6, 8 -> 12: Directed=' || directed ||', forbid 6,10');
  RETURN QUERY
  SELECT set_eq($$"graph1" ('2,12','{6,12}',$$||directed||$$)$$, $$"get_solution" (17,17,$$||directed||$$)  $$, '10 -> 6, 8 -> 12: Directed=' || directed ||', forbid 6,12');
  RETURN QUERY
  SELECT set_eq($$"graph1" ('2,12','{8,10}',$$||directed||$$)$$, $$"get_solution" (18,18,$$||directed||$$)  $$, '10 -> 6, 8 -> 12: Directed=' || directed ||', forbid 8,10');
  RETURN QUERY
  SELECT set_eq($$"graph1" ('2,12','{8,12}',$$||directed||$$)$$, $$"get_solution" (11,11,$$||directed||$$) $$, '10 -> 6, 8 -> 12: Directed=' || directed ||', forbid 8,12');
  RETURN QUERY
  SELECT set_eq($$"graph1" ('2,12','{6,8,10}',$$||directed||$$)$$, $$"get_solution" (6,6,$$||directed||$$) $$, '10 -> 6, 8 -> 12: Directed=' || directed ||', forbid 6,8,10');
  RETURN QUERY
  SELECT set_eq($$"graph1" ('2,12','{6,8,12}',$$||directed||$$)$$, $$"get_solution" (20,20,$$||directed||$$) $$, '10 -> 6, 8 -> 12: Directed=' || directed ||', forbid 6,8,12');
  RETURN QUERY
  SELECT set_eq($$"graph1" ('2,12','{6,10,12}',$$||directed||$$)$$, $$"get_solution" (5,5,$$||directed||$$) $$, '10 -> 6, 8 -> 12: Directed=' || directed ||', forbid 6,10,12');
  RETURN QUERY
  SELECT set_eq($$"graph1" ('2,12','{8,10,12}',$$||directed||$$)$$, $$"get_solution" (11,11,$$||directed||$$) $$, '10 -> 6, 8 -> 12: Directed=' || directed ||', forbid 8,10,12');
  RETURN QUERY
  SELECT is_empty($$"graph1" ('2,12','{6,8,10,12}',$$||directed||$$)$$, '10 -> 6, 8 -> 12: Directed=' || directed ||', forbid 6,8,10,12');


  -- THREE edges
  RETURN QUERY
  SELECT set_eq($$"graph1" ('5,11,13','{}',$$||directed||$$)$$, $$"get_solution" (21,21,$$||directed||$$) $$, '10 -> 11 -> 12 -> 17: Directed=' || directed ||', no forbidden vertices');
  RETURN QUERY
  SELECT set_eq($$"graph1" ('5,11,13','{10}',$$||directed||$$)$$, $$"get_solution" (22,22,$$||directed||$$) $$, '10 -> 11 -> 12 -> 17: Directed=' || directed ||', forbid 10');
  RETURN QUERY
  SELECT set_eq($$"graph1" ('5,11,13','{11}',$$||directed||$$)$$, $$"get_solution" (23,23,$$||directed||$$) $$, '10 -> 11 -> 12 -> 17: Directed=' || directed ||', forbid 11');
  RETURN QUERY
  SELECT set_eq($$"graph1" ('5,11,13','{12}',$$||directed||$$)$$, $$"get_solution" (24,24,$$||directed||$$) $$, '10 -> 11 -> 12 -> 17: Directed=' || directed ||', forbid 12');
  RETURN QUERY
  SELECT set_eq($$"graph1" ('5,11,13','{17}',$$||directed||$$)$$, $$"get_solution" (21,21,$$||directed||$$) $$, '10 -> 11 -> 12 -> 17: Directed=' || directed ||', forbid 17');
  RETURN QUERY
  SELECT is_empty($$"graph1" ('5,11,13','{10,17}',$$||directed||$$)$$, '10 -> 11 -> 12 -> 17: Directed Directed=' || directed ||', forbid 10,17');

  -- The graph1
  RETURN QUERY
  SELECT set_eq($$"graph1" ('1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16','{}',$$||directed||$$)$$,  $$"get_solution" (25,25,$$||directed||$$) $$, 'the graph1: Directed=' || directed ||', no forbidden vertices');
  RETURN QUERY
  SELECT set_eq($$"graph1" ('1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16','{3}',$$||directed||$$)$$,  $$"get_solution" (26,26,$$||directed||$$) $$, 'the graph1: Directed=' || directed ||', forbid 3');

END;
$BODY$
LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION edge_cases(directed text)
RETURNS SETOF TEXT AS
$BODY$
BEGIN

RETURN QUERY SELECT is_empty(format($$"graph" ('0',%1$s)$$,directed),'empty graph: 0,'||directed);

RETURN QUERY SELECT isnt_empty(format($$"graph" ('1',%1$s)$$,directed), 'not empty graph: 1,'||directed);
RETURN QUERY SELECT set_eq(format($$"graph" ('1',%1$s)$$,directed), $$ VALUES ('v',2,ARRAY[1]::BIGINT[],-1,-1,-1) $$, 'expected graph: 1,'||directed) ;

RETURN QUERY SELECT isnt_empty(format($$"graph" ('0,1',%1$s)$$,directed), 'not empty graph: 0,1,'||directed);
RETURN QUERY SELECT set_eq(format($$"graph" ('0,1',%1$s)$$,directed), $$ VALUES ('v',2,ARRAY[1]::BIGINT[],-1,-1,-1) $$, 'expected graph: 0,1,'||directed) ;

RETURN QUERY SELECT isnt_empty(format($$"graph" ('0,2',%1$s)$$,directed), 'not empty graph: 0,2,'||directed);
RETURN QUERY SELECT set_eq(format($$"graph" ('0,2',%1$s)$$,directed), $$ VALUES ('v',2,ARRAY[1]::BIGINT[],-1,-1,-1) $$, 'expected graph: 0,2,'||directed) ;

RETURN QUERY SELECT isnt_empty(format($$"graph" ('0,3',%1$s)$$,directed), 'not empty graph: 0,3,'||directed);
RETURN QUERY SELECT set_eq(format($$"graph" ('0,3',%1$s)$$,directed), $$ VALUES ('v',2,ARRAY[1]::BIGINT[],-1,-1,-1) $$, 'expected graph: 0,3,'||directed) ;

RETURN QUERY SELECT isnt_empty(format($$"graph" ('0,4',%1$s)$$,directed), 'not empty graph: 0,4,'||directed);
RETURN QUERY SELECT set_eq(format($$"graph" ('0,4',%1$s)$$,directed), $$ VALUES ('v',2,ARRAY[1]::BIGINT[],-1,-1,-1) $$, 'expected graph: 0,4,'||directed) ;

RETURN QUERY
SELECT CASE WHEN directed::BOOLEAN THEN
  collect_tap(
    isnt_empty(format($$"graph" ('0,5',%1$s)$$,directed), 'empty graph: 0,5,'||directed),
    set_eq(format($$"graph" ('0,5',%1$s)$$,directed), $$ VALUES ('v',2,ARRAY[1]::BIGINT[],-1,-1,-1), ('v',3,ARRAY[1]::BIGINT[],-1,-1,-1) $$, 'expected graph: 0,4,'||directed),
    isnt_empty(format($$"graph" ('0,6',%1$s)$$,directed), 'empty graph: 0,6,'||directed),
    set_eq(format($$"graph" ('0,6',%1$s)$$,directed), $$ VALUES ('v',2,ARRAY[1]::BIGINT[],-1,-1,-1), ('v',3,ARRAY[1]::BIGINT[],-1,-1,-1) $$, 'expected graph: 0,6,'||directed))
ELSE
  collect_tap(
    is_empty(format($$"graph" ('0,5',%1$s)$$,directed), 'empty graph: 0,5,'||directed),
    is_empty(format($$"graph" ('0,6',%1$s)$$,directed), 'empty graph: 0,6,'||directed))
END;

END;
$BODY$
LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION edge_cases()
RETURNS SETOF TEXT AS
$BODY$
BEGIN

  IF NOT min_version('3.8.0') THEN
    RETURN QUERY
    SELECT skip(1, 'pgr_contractionDeadEnd is new on 3.8.0');
    RETURN;
  END IF;

  PREPARE graph1(text,text,text) AS
  SELECT type, id, contracted_vertices FROM pgr_contractionDeadEnd(
    format($$SELECT id, source, target, cost, reverse_cost FROM edges WHERE id IN (%s) ORDER by id$$, $1),
    $3::boolean, $2::INTEGER[]);

  prepare graph(text, text) AS
  SELECT * FROM pgr_contractionDeadEnd(
    format($$SELECT * FROM graphs WHERE dead_case IN (%1$s) ORDER BY id$$, $1),
    $2::boolean);

  RETURN QUERY SELECT edge_cases('true');
  RETURN QUERY SELECT edge_cases('false');
  RETURN QUERY SELECT edge_cases_sampledata('true');
  RETURN QUERY SELECT edge_cases_sampledata('false');

END;
$BODY$
LANGUAGE plpgsql;

SELECT edge_cases();

SELECT finish();
ROLLBACK;

