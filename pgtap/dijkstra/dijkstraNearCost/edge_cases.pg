
/*PGR-GNU*****************************************************************

Copyright (c) 2018  pgRouting developers
Mail: project@pgrouting.org

------
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 ********************************************************************PGR-GNU*/
BEGIN;

SELECT CASE WHEN NOT min_version('3.2.0') THEN plan(1) ELSE plan(122) END;

UPDATE edges SET cost = sign(cost), reverse_cost = sign(reverse_cost);


CREATE TABLE expected AS
WITH
a AS (SELECT start_vid, d_w_1, u_w_1, d_n_1, u_n_1
  FROM (VALUES
    (5::BIGINT,
        ARRAY[6]::BIGINT[],   ARRAY[6]::BIGINT[],    ARRAY[6]::BIGINT[],   ARRAY[6]::BIGINT[]),
    (6,  ARRAY[ 5, 7],          ARRAY[ 5, 10, 7],     ARRAY[ 7],     ARRAY[  5, 7]),
    (10,  ARRAY[ 6, 11],          ARRAY[ 6, 15, 11],     ARRAY[ 11],     ARRAY[  11]),
    (15,  ARRAY[ 10, 16],          ARRAY[ 10, 16],        ARRAY[ 16],     ARRAY[  16]),
    (7,  ARRAY[ 6, 11, 3, 8],   ARRAY[ 6, 11, 3, 8], ARRAY[ 11, 8], ARRAY[  6, 11, 3, 8]),
    (11,  ARRAY[ 7, 16, 12],      ARRAY[ 10, 7, 16, 12], ARRAY[ 16, 12], ARRAY[  10, 7, 16, 12]),
    (1,  ARRAY[ 3],             ARRAY[ 3],           ARRAY[ 3],     ARRAY[  3]),
    (3,  ARRAY[ 7, 1],          ARRAY[ 7, 1],        ARRAY[ 7],     ARRAY[  7, 1]),
    (16,  ARRAY[ 15, 11, 17],      ARRAY[ 15, 11, 17],    ARRAY[17],     ARRAY[  15, 11, 17]),
    (8, ARRAY[ 7, 12, 9],     ARRAY[ 7, 12, 9],   ARRAY[12, 9], ARRAY[  7, 12, 9]),
    (12, ARRAY[17],             ARRAY[17, 8, 11],   ARRAY[17],     ARRAY[  17, 8, 11]),
    (11, ARRAY[ 16],             ARRAY[16, 12],        NULL,          ARRAY[ 16, 12]),
    (9, ARRAY[8],             ARRAY[8],           NULL,          ARRAY[ 8]),
    (2, ARRAY[4],             ARRAY[4],           ARRAY[4],     ARRAY[ 4]),
    (4, ARRAY[2],             ARRAY[2],           NULL,          ARRAY[ 2]),
    (13, ARRAY[14],             ARRAY[14],           ARRAY[14],     ARRAY[ 14]),
    (14, ARRAY[13],             ARRAY[13],           NULL,          ARRAY[ 13])
  ) t(start_vid, d_w_1, u_w_1, d_n_1, u_n_1))
SELECT * from a;


CREATE OR REPLACE FUNCTION check_expected(edges_q TEXT, expected_q TEXT, optionals TEXT)
RETURNS SETOF TEXT AS
$BODY$
DECLARE
dijstraNear_query TEXT;
inner_query TEXT;
expected_query TEXT;
data record;
dest BIGINT;
id BIGINT;
BEGIN

    FOR data IN EXECUTE expected_q LOOP
        id := data.frst;
        CONTINUE WHEN data.scnd IS NULL;

        FOREACH dest IN ARRAY data.scnd LOOP
          IF NOT min_version('3.2.0') THEN
            RETURN QUERY
            SELECT skip(1, 'Function is new on 3.2.0');
            CONTINUE;
          END IF;

            inner_query := format($$
                WITH
                edges AS (%1$s),
                first_edge AS (SELECT *, (source = %2$s AND target = %3$s) OR (source = %3$s AND target = %2$s) AS order_1 FROM edges)
                SELECT * FROM first_edge ORDER BY order_1 DESC
                $$, edges_q, id, dest);
            dijstraNear_query := format($$
                SELECT distinct end_vid
                FROM pgr_dijkstraNearCost(
                    %1$L,
                    %2$s,
                    (SELECT array_agg(id) FROM vertices where id != %2$s),
                    %3$s)
                $$, inner_query, id, optionals);
            expected_query := format($$
                SELECT %1$s
                $$, dest);

            RETURN QUERY
            SELECT set_eq(dijstraNear_query, expected_query, id::TEXT || '->' || dest || ' ' || optionals);
            END LOOP;
    END LOOP;

END
$BODY$
LANGUAGE plpgsql VOLATILE;

CREATE OR REPLACE FUNCTION compare()
RETURNS SETOF TEXT AS
$BODY$
BEGIN

IF NOT min_version('3.2.0') THEN
  RETURN QUERY
  SELECT skip(1, 'Function is new on 3.2.0');
  RETURN;
END IF;

RETURN QUERY
SELECT is_empty($$SELECT distinct cost FROM edges WHERE cost != 1 AND cost != -1$$);
RETURN QUERY
SELECT is_empty($$SELECT distinct reverse_cost FROM edges WHERE cost != 1 AND cost != -1$$);

-- Initial tables are good to work

RETURN QUERY
SELECT isnt_empty($$SELECT id, source, target, cost, reverse_cost FROM edges$$);
RETURN QUERY
SELECT isnt_empty($$SELECT id FROM vertices$$);

-- vertex id values that dont exist
RETURN QUERY
SELECT is_empty($$SELECT id FROM vertices WHERE id > 18$$);
RETURN QUERY
SELECT is_empty($$SELECT id, source, target, cost, reverse_cost FROM edges WHERE source > 18$$);
RETURN QUERY
SELECT is_empty($$SELECT id, source, target, cost, reverse_cost FROM edges WHERE target > 18$$);
RETURN QUERY
SELECT is_empty($$SELECT id FROM edges WHERE id > 18$$);


RETURN QUERY
SELECT * from check_expected(
    $$SELECT id, source, target, cost, reverse_cost FROM edges ORDER BY id DESC$$,
    $$SELECT start_vid AS frst, d_w_1 AS scnd FROM expected$$,
    'directed => true, cap => 1'
);

RETURN QUERY
SELECT * from check_expected(
    $$SELECT id, source, target, cost, reverse_cost FROM edges ORDER BY id DESC$$,
    $$SELECT start_vid AS frst, u_w_1 AS scnd FROM expected$$,
    'directed => false, cap => 1'
);

RETURN QUERY
SELECT * from check_expected(
    $$SELECT id, source, target, cost  FROM edges ORDER BY id DESC$$,
    $$SELECT start_vid AS frst, d_n_1 AS scnd FROM expected$$,
    'directed => true, cap => 1'
);

RETURN QUERY
SELECT * from check_expected(
    $$SELECT id, source, target, cost  FROM edges ORDER BY id DESC$$,
    $$SELECT start_vid AS frst, u_n_1 AS scnd FROM expected$$,
    'directed => false, cap => 1'
);
END;
$BODY$
LANGUAGE plpgsql;

SELECT compare();
SELECT finish();
ROLLBACK;
