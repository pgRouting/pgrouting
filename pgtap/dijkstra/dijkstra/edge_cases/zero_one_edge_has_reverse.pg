
/*PGR-GNU*****************************************************************

Copyright (c) 2018  pgRouting developers
Mail: project@pgrouting.org

------
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 ********************************************************************PGR-GNU*/
BEGIN;

UPDATE edges SET cost = sign(cost), reverse_cost = sign(reverse_cost);
SELECT CASE WHEN min_version('3.1.0') THEN plan(126) ELSE PLAN(102) END;

-- 0 edges tests

PREPARE edges0 AS
SELECT id, source, target, cost, reverse_cost from edges where id>18;

SELECT is_empty('edges0','Edges 0');

SELECT taptest('is_empty','edges0', 7, 11, true);
SELECT taptest('is_empty','edges0', 11, 7, true);
SELECT taptest('is_empty','edges0', 7, 11, false);
SELECT taptest('is_empty','edges0', 11, 7, false);


-- 1 edges tests

-- edge 11-16
PREPARE edges1 AS
SELECT id, source, target, cost, reverse_cost from edges where id = 9;

SELECT results_eq('edges1',
'SELECT 9::BIGINT, 11::BIGINT, 16::BIGINT, 1::FLOAT, 1::FLOAT',
'Edges1: 11-16');

SELECT taptest('is_empty','edges1', 7, 11, true);
SELECT taptest('is_empty','edges1', 11, 7, true);
SELECT taptest('is_empty','edges1', 7, 11, false);
SELECT taptest('is_empty','edges1', 11, 7, false);


-- edge 6-7
PREPARE edges2 AS
SELECT id, source, target, cost, reverse_cost from edges where id = 4;

SELECT results_eq('edges2',
'SELECT 4::BIGINT, 6::BIGINT, 7::BIGINT, 1::FLOAT, 1::FLOAT',
'Edges2: 6-7');

SELECT taptest('is_empty','edges2', 7, 11, true);
SELECT taptest('is_empty','edges2', 11, 7, true);
SELECT taptest('is_empty','edges2', 7, 11, false);
SELECT taptest('is_empty','edges2', 11, 7, false);

-- edge 7-11
PREPARE edges3 AS
SELECT id, source, target, cost, reverse_cost from edges where id = 8;

SELECT results_eq('edges3',
'SELECT 8::BIGINT, 7::BIGINT, 11::BIGINT, 1::FLOAT, 1::FLOAT',
'Edges3: 7-11');

SELECT taptest('isnt_empty','edges3', 7, 11, true);
SELECT taptest('isnt_empty','edges3', 11, 7, true);
SELECT taptest('isnt_empty','edges3', 7, 11, false);
SELECT taptest('isnt_empty','edges3', 11, 7, false);

-- edge 10->11
PREPARE edges4 AS
SELECT id, source, target, cost, reverse_cost from edges where id = 5;

SELECT results_eq('edges4',
'SELECT 5::BIGINT, 10::BIGINT, 11::BIGINT, 1::FLOAT, -1::FLOAT',
'edges4: 10->11');

SELECT taptest('is_empty','edges4', 7, 11, true);
SELECT taptest('is_empty','edges4', 11, 7, true);
SELECT taptest('is_empty','edges4', 7, 11, false);
SELECT taptest('is_empty','edges4', 11, 7, false);

-- only 10<-15
PREPARE edges5 AS
SELECT id, source, target, cost, reverse_cost from edges where id = 3;

SELECT results_eq('edges5',
'SELECT 3::BIGINT, 10::BIGINT, 15::BIGINT, -1::FLOAT, 1::FLOAT',
'edges5: 10<-15');

SELECT taptest('is_empty','edges5', 10, 15, true);
SELECT taptest('isnt_empty','edges5', 15, 10, true);
SELECT taptest('isnt_empty','edges5', 10, 15, false);
SELECT taptest('isnt_empty','edges5', 15, 10, false);

SELECT * FROM finish();
ROLLBACK;

