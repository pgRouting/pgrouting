
/*PGR-GNU*****************************************************************

Copyright (c) 2018  pgRouting developers
Mail: project@pgrouting.org

------
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 ********************************************************************PGR-GNU*/
BEGIN;

UPDATE edges SET cost = sign(cost), reverse_cost = sign(reverse_cost);
SELECT CASE WHEN NOT min_version('3.4.0') THEN plan(1) ELSE plan(9) END;

CREATE OR REPLACE FUNCTION edge_cases()
RETURNS SETOF TEXT AS
$BODY$
BEGIN

IF NOT min_version('3.4.0') THEN
  RETURN QUERY
  SELECT skip(1, 'Function is new on 3.4.0');
  RETURN;
END IF;

-- 0 edge, 0 vertex test

PREPARE q1 AS
SELECT id, source, target, cost, reverse_cost
FROM edges
WHERE id > 18;

RETURN QUERY
SELECT is_empty('q1', 'Graph with 0 edge and 0 vertex');

PREPARE hawickCircuits1 AS
SELECT * FROM pgr_hawickcircuits('q1');

RETURN QUERY
SELECT is_empty('hawickCircuits1', 'Graph with 0 edge and 0 vertex -> Empty row is returned');


-- 1 vertex test

PREPARE q2 AS
SELECT id, source, target, cost, reverse_cost
FROM edges
WHERE id = 2;

PREPARE hawickCircuits2 AS
SELECT * FROM pgr_hawickcircuits('q2');

RETURN QUERY
SELECT is_empty('hawickCircuits2', 'One vertex graph can not have circuits -> Empty row is returned');

-- 2 vertices test (connected)

PREPARE q3 AS
SELECT id, source, target, cost, reverse_cost
FROM edges
WHERE id = 7;

RETURN QUERY
SELECT set_eq('q3', $$VALUES (7, 3, 7, 1, 1)$$, 'Graph with two connected vertices 3 and 7');

PREPARE hawickCircuits3 AS
SELECT * FROM pgr_hawickcircuits('q3');

RETURN QUERY
SELECT set_eq('hawickCircuits3',
    $$VALUES
        (1, 1, 0, 3, 3, 3, 7, 1, 0),
        (2, 1, 1, 3, 3, 7, 7, 1, 1),
        (3, 1, 2, 3, 3, 3, -1, 0, 2)
    $$,
    'Circuit between the vertex 3 and 7');

-- 3 vertices test

PREPARE q4 AS
SELECT id, source, target, cost, reverse_cost
FROM edges
WHERE id <= 2;

RETURN QUERY
SELECT set_eq('q4', $$VALUES (1, 5, 6, 1, 1), (2, 6, 10, -1, 1)$$, 'Graph with three vertices 5, 6 and 10');

PREPARE hawickCircuits4 AS
SELECT * FROM pgr_hawickcircuits('q4');

RETURN QUERY
SELECT set_eq('hawickCircuits4',
    $$VALUES
        (1, 1, 0, 5, 5, 5, 1, 1, 0),
        (2, 1, 1, 5, 5, 6, 1, 1, 1),
        (3, 1, 2, 5, 5, 5, -1, 0, 2)
    $$,
    'Circuit between the vertex 5 and 6');

-- 4 vertices test

PREPARE q5 AS
SELECT id, source, target, cost, reverse_cost
FROM edges
WHERE id IN (3, 5, 9, 16);

RETURN QUERY
SELECT set_eq('q5',
    $$VALUES
        (3, 10, 15, -1, 1),
        (5, 10, 11, 1, -1),
        (9, 11, 16, 1, 1),
        (16, 15, 16, 1, 1)
    $$,
    'Graph with four vertices 10, 11, 15, 16');

PREPARE hawickCircuits5 AS
SELECT path_seq, start_vid, end_vid, node, edge, cost, agg_cost FROM pgr_hawickCircuits('q5');

RETURN QUERY
SELECT set_eq('hawickCircuits5',
    $$VALUES
    ( 0, 10, 10, 10, 5, 1, 0),
    ( 1, 10, 10, 11, 9, 1, 1),
    ( 2, 10, 10, 16, 16, 1, 2),
    ( 3, 10, 10, 15, 3, 1, 3),
    ( 4, 10, 10, 10, -1, 0, 4),
    ( 0, 15, 15, 15, 16, 1, 0),
    ( 1, 15, 15, 16, 16, 1, 1),
    ( 2, 15, 15, 15, -1, 0, 2),
    ( 0, 11, 11, 11, 9, 1, 0),
    ( 1, 11, 11, 16, 9, 1, 1),
    ( 2, 11, 11, 11, -1, 0, 2)
    $$,
    'TEST 9: Circuits 10->11->16->15->10, 15->16->15 & 11>16>11 expected');

END;
$BODY$
LANGUAGE plpgsql;

SELECT edge_cases();

SELECT * FROM finish();
ROLLBACK;
