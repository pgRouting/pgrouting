BEGIN;

SET extra_float_digits = -3;
UPDATE edge_table SET cost = sign(cost) + 0.001 * id * id, reverse_cost = sign(reverse_cost) + 0.001 * id * id;
SELECT plan(26);

CREATE TEMP TABLE data AS
SELECT id, st_X(the_geom) AS x, st_Y(the_geom)AS y  FROM edge_table_vertices_pgr;

CREATE FUNCTION tsp_edge_cases(tbl regclass)
RETURNS SETOF TEXT AS
$code$
BEGIN

    RETURN QUERY
    SELECT throws_ok(format($$
      SELECT * FROM pgr_TSPeuclidean('SELECT * FROM %1$I', start_id => 5, end_id => 20) $$, tbl),
      'XX000',
      $$Parameter 'end_id' do not exist on the data$$,
      tbl::TEXT ||' SHOULD throw because end_id does not exist');

    RETURN QUERY
    SELECT throws_ok(format($$
      SELECT * FROM pgr_TSPeuclidean('SELECT * FROM %1$I', end_id => 20) $$, tbl),
      'XX000',
      $$Parameter 'end_id' do not exist on the data$$,
      'SHOULD throw because end_id does not exist');

    RETURN QUERY
    SELECT throws_ok(format($$
      SELECT * FROM pgr_TSPeuclidean('SELECT * FROM %1$I', start_id => 20, end_id => 5) $$, tbl),
      'XX000',
      $$Parameter 'start_id' do not exist on the data$$,
      'SHOULD throw because start_vid does not exist');

    RETURN QUERY
    SELECT throws_ok(format($$
      SELECT * FROM pgr_TSPeuclidean('SELECT * FROM %1$I', start_id => 20) $$, tbl),
      'XX000',
      $$Parameter 'start_id' do not exist on the data$$,
      'SHOULD throw because start_vid does not exist');

    RETURN QUERY
    SELECT is(
      (SELECT cost FROM pgr_TSPeuclidean(format('SELECT * FROM %1$I', tbl), start_id => 5, end_id => 3) WHERE seq = 1),
      0::FLOAT,
      'SHOULD PASS: cost at row 0 is 0.0');

    RETURN QUERY
    SELECT is(
      (SELECT cost FROM pgr_TSPeuclidean(format('SELECT * FROM %1$I', tbl), end_id => 3) WHERE seq = 1),
      0::FLOAT,
      'end_id => 3 SHOULD PASS: cost at row 0 is 0.0');

    RETURN QUERY
    SELECT is(
      (SELECT cost FROM pgr_TSPeuclidean(format('SELECT * FROM %1$I', tbl), start_id => 5) WHERE seq = 1),
      0::FLOAT,
      'start_id => 5 SHOULD PASS: cost at row 0 is 0.0');

    RETURN QUERY
    SELECT is(
      (SELECT node FROM pgr_TSPeuclidean(format('SELECT * FROM %1$I', tbl), end_id => 3) WHERE seq = 18),
      3::BIGINT,
      'end_id => 3 SHOULD PASS: last node should be 3');

    RETURN QUERY
    SELECT lives_ok(format($$
      SELECT * FROM pgr_TSPeuclidean('SELECT * FROM %1$I', start_id => 1, end_id => 1) $$, tbl),
      'SHOULD PASS: one_node_loop');

    RETURN QUERY
    SELECT is(
      (SELECT agg_cost FROM pgr_TSPeuclidean(format('SELECT * FROM %1$I WHERE id IN (2,4,5,8,9,15)', tbl)) WHERE seq = 7),
      9.302775637732239::FLOAT,
      'The cost from is 9.x');

  RETURN QUERY
  SELECT is(
    (SELECT count(*) FROM pgr_TSPeuclidean(format('SELECT * FROM %1$I',tbl), end_id => 3)),
    18::BIGINT,
    tbl::TEXT || ' end_id => 3 SHOULD PASS: total number of rows is 18 because there are 17 nodes involved');

  -- 5,3
  RETURN QUERY
  SELECT is(
    (SELECT count(*) FROM pgr_TSPeuclidean(format('SELECT * FROM %1$I',tbl), start_id => 5, end_id => 3)),
    18::BIGINT,
    'SHOULD PASS: total number of rows is 18 because there are 17 nodes involved');

  RETURN QUERY
  SELECT is(
    (SELECT agg_cost FROM pgr_TSPeuclidean(format('SELECT * FROM %1$I',tbl), start_id => 5, end_id => 3) WHERE seq = 1),
    0::FLOAT,
    'start_id => 5, end_id => 3: SHOULD PASS: agg_cost at row 0 is 0.0');

  RETURN QUERY
  SELECT is(
    (SELECT node FROM pgr_TSPeuclidean(format('SELECT * FROM %1$I',tbl), start_id => 5, end_id => 3) WHERE seq = 1),
    5::BIGINT,
    'start_id => 5, end_id => 3: SHOULD PASS: first node should be 5');

  RETURN QUERY
  SELECT is(
    (SELECT node FROM pgr_TSPeuclidean(format('SELECT * FROM %1$I',tbl), start_id => 5, end_id => 3) WHERE seq = 18),
    5::BIGINT,
    'start_id => 5, end_id => 3: SHOULD PASS: last node should be 5');

  RETURN QUERY
  SELECT is(
    (SELECT node FROM pgr_TSPeuclidean(format('SELECT * FROM %1$I',tbl), start_id => 5, end_id => 3) WHERE seq = 17),
    3::BIGINT,
    'SHOULD PASS: second to last node should be 3');

  -- 5, 5
  RETURN QUERY
  SELECT is(
    (SELECT agg_cost FROM pgr_TSPeuclidean(format('SELECT * FROM %1$I',tbl), start_id => 5, end_id => 5) WHERE seq = 1),
    0::FLOAT,
    'start_id => 5, end_id => 5: SHOULD PASS: agg_cost at row 0 is 0.0');

  RETURN QUERY
  SELECT is(
    (SELECT node FROM pgr_TSPeuclidean(format('SELECT * FROM %1$I',tbl), start_id => 5, end_id => 5 ) WHERE seq = 1),
    5::BIGINT,
    'start_id => 5, end_id => 5: SHOULD PASS: first node should be 5');

  RETURN QUERY
  SELECT is(
    (SELECT node FROM pgr_TSPeuclidean(format('SELECT * FROM %1$I',tbl), start_id => 5, end_id => 5) WHERE seq = 18),
    5::BIGINT,
    'start_id => 5, end_id => 5: SHOULD PASS: last node should be 5');


  -- x,3
  RETURN QUERY
  SELECT is(
    (SELECT agg_cost FROM pgr_TSPeuclidean(format('SELECT * FROM %1$I',tbl), end_id => 3) WHERE seq = 1),
    0::FLOAT,
    'end_id => 3 SHOULD PASS: agg_cost at row 0 is 0.0');

  RETURN QUERY
  SELECT is(
    (SELECT count(*) FROM pgr_TSPeuclidean(format('SELECT * FROM %1$I',tbl), start_id => 5)),
    18::BIGINT,
    'start_id => 5 SHOULD PASS: total number of rows is 18 because there are 17 nodes involved');

  RETURN QUERY
  SELECT is(
    (SELECT node FROM pgr_TSPeuclidean(format('SELECT * FROM %1$I',tbl), start_id => 5) WHERE seq = 1),
    5::BIGINT,
    'start_id => 5 SHOULD PASS: first node should be 5');

  RETURN QUERY
  SELECT is(
    (SELECT node FROM pgr_TSPeuclidean(format('SELECT * FROM %1$I',tbl), start_id => 5) WHERE seq = 18),
    5::BIGINT,
    'start_id => 5 SHOULD PASS: last node should be 5');

  RETURN QUERY
  SELECT is(
    (SELECT agg_cost FROM pgr_TSPeuclidean(format('SELECT * FROM %1$I',tbl), start_id => 5) WHERE seq = 1),
    0::FLOAT,
    'start_id => 5 SHOULD PASS: agg_cost at row 0 is 0.0');

  RETURN QUERY
  SELECT lives_ok(
    format($$SELECT agg_cost FROM pgr_TSPeuclidean('SELECT * FROM %1$I WHERE id = 20')$$, tbl),
    'SELECT * FROM data WHERE start_vid = 20: Lives when inner query is empty');

  RETURN QUERY
  SELECT is_empty(
    format($$SELECT agg_cost FROM pgr_TSPeuclidean('SELECT * FROM %1$I WHERE id = 20')$$, tbl),
    'SELECT * FROM data WHERE start_vid = 20: Inner query is empty');

END;
$code$
language plpgsql;

SELECT tsp_edge_cases('data');

SELECT finish();
ROLLBACK;
