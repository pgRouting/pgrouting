/*PGR-GNU*****************************************************************

Copyright (c) 2018  pgRouting developers
Mail: project@pgrouting.org

------
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 ********************************************************************PGR-GNU*/
BEGIN;

SET extra_float_digits=-3;
UPDATE edges SET cost = sign(cost) + 0.001 * id * id, reverse_cost = sign(reverse_cost) + 0.001 * id * id;

SELECT CASE WHEN min_lib_version('4.0.0') THEN plan(56) ELSE plan(2) END;


CREATE FUNCTION tsp_edge_cases(tbl TEXT)
RETURNS SETOF TEXT AS
$code$
BEGIN

  IF NOT min_lib_version('4.0.0') THEN
    RETURN QUERY SELECT skip(1, 'pgr_tsp new internal code on v4.0.0');
    RETURN;
  END IF;

  IF min_version('4.0.0') THEN

    CREATE TEMP TABLE IF NOT EXISTS data AS
    SELECT * FROM pgr_withPointsCostMatrix(
      'SELECT id, source, target, cost, reverse_cost FROM edges ORDER BY id',
      'SELECT pid, edge_id, fraction from pointsOfInterest',
      array[-1, 10, 7, 11, -6], 'b', directed => false);

    CREATE TEMP TABLE IF NOT EXISTS data_directed AS
    SELECT * FROM pgr_withPointsCostMatrix(
      'SELECT id, source, target, cost, reverse_cost FROM edges ORDER BY id',
      'SELECT pid, edge_id, fraction from pointsOfInterest',
      array[-1, 10, 7, 11, -6], 'r', directed => true);

  ELSE

    CREATE TEMP TABLE IF NOT EXISTS data AS
    SELECT * FROM pgr_withPointsCostMatrix(
      'SELECT id, source, target, cost, reverse_cost FROM edges ORDER BY id',
      'SELECT pid, edge_id, fraction from pointsOfInterest',
      array[-1, 10, 7, 11, -6], driving_side => 'b', directed => false);

    CREATE TEMP TABLE IF NOT EXISTS data_directed AS
    SELECT * FROM pgr_withPointsCostMatrix(
      'SELECT id, source, target, cost, reverse_cost FROM edges ORDER BY id',
      'SELECT pid, edge_id, fraction from pointsOfInterest',
      array[-1, 10, 7, 11, -6], driving_side => 'r', directed => true);

  END IF;

  RETURN QUERY
  SELECT throws_ok(format($$
    SELECT * FROM pgr_TSP('SELECT * FROM %1$I', start_id => 7, end_id => 8) $$, tbl),
    'XX000',
    $$Parameter 'end_id' do not exist on the data$$,
    tbl::TEXT ||' SHOULD throw because end_id does not exist');

  RETURN QUERY
  SELECT throws_ok(format($$
    SELECT * FROM pgr_TSP('SELECT * FROM %1$I', end_id => 8) $$, tbl),
    'XX000',
    $$Parameter 'end_id' do not exist on the data$$,
    'SHOULD throw because end_id does not exist');

  RETURN QUERY
  SELECT throws_ok(format($$
    SELECT * FROM pgr_TSP('SELECT * FROM %1$I', start_id => 8, end_id => 7) $$, tbl),
    'XX000',
    $$Parameter 'start_id' do not exist on the data$$,
    'SHOULD throw because start_vid does not exist');

  RETURN QUERY
  SELECT throws_ok(format($$
    SELECT * FROM pgr_TSP('SELECT * FROM %1$I', start_id => 8) $$, tbl),
    'XX000',
    $$Parameter 'start_id' do not exist on the data$$,
    'SHOULD throw because start_vid does not exist');

  RETURN QUERY
  SELECT lives_ok(format($$
    SELECT * FROM pgr_TSP(
      'SELECT * FROM %1$I WHERE start_vid = -1 and end_vid = 10
      UNION
      SELECT * FROM %1$I WHERE start_vid = 7 and end_vid = 11')
    $$, tbl),
    'Should live, even when the matrix is not fully connected');

  RETURN QUERY
  SELECT throws_ok(format($$
    SELECT * FROM pgr_TSP('SELECT * FROM %1$I', start_id => 8) $$, tbl),
    'XX000',
    $$Parameter 'start_id' do not exist on the data$$,
    '4 SHOULD throw because start_id does not exist');

  RETURN QUERY
  SELECT is(
    (SELECT cost FROM pgr_TSP(format('SELECT * FROM %1$I', tbl), start_id => 7, end_id => 10) WHERE seq = 1),
    0::FLOAT,
    'SHOULD PASS: cost at row 0 is 0.0');

  RETURN QUERY
  SELECT is(
    (SELECT cost FROM pgr_TSP(format('SELECT * FROM %1$I', tbl), end_id => 10) WHERE seq = 1),
    0::FLOAT,
    'end_id => 3 SHOULD PASS: cost at row 0 is 0.0');

  RETURN QUERY
  SELECT is(
    (SELECT cost FROM pgr_TSP(format('SELECT * FROM %1$I', tbl), start_id => 7) WHERE seq = 1),
    0::FLOAT,
    'start_id => 5 SHOULD PASS: cost at row 0 is 0.0');

  RETURN QUERY
  SELECT is(
    (SELECT node FROM pgr_TSP(format('SELECT * FROM %1$I', tbl), end_id => 10) WHERE seq = 6),
    10::BIGINT,
    'T10: end_id => 10 SHOULD PASS: last node should be 10');

  RETURN QUERY
  SELECT lives_ok(
    $$SELECT node FROM pgr_TSP('SELECT 5 AS start_vid, 5 AS end_vid, 1 AS agg_cost')$$,
    'SHOULD PASS: one_node_loop');

  RETURN QUERY
  SELECT set_eq(
    $q$SELECT node, cost, agg_cost::TEXT FROM pgr_TSP(
      $$
      SELECT source AS start_vid, target AS end_vid, cost AS agg_cost
      FROM edges
      WHERE id IN (2,4,5,8,9,15) ORDER BY start_vid
      $$)
    $q$,
    $q$ VALUES
    ( 6::BIGINT, 0::FLOAT, '0'::TEXT),
    (11, 1.016, '1.016'),
    (17, 1.081, '2.097'),
    (16, 1.225, '3.322'),
    (10, 1.081, '4.403'),
    ( 7, 1.025, '5.428'),
    ( 6, 1.016, '6.444')
    $q$,
    'Expected results');

  RETURN QUERY
  SELECT is(
    (SELECT count(*) FROM pgr_TSP(format('SELECT * FROM %1$I',tbl), end_id => 10)),
    6::BIGINT,
    tbl::TEXT || ' end_id => 10 SHOULD PASS: total number of rows is 6 because there are 5 nodes involved');

  -- 5,3
  RETURN QUERY
  SELECT is(
    (SELECT count(*) FROM pgr_TSP(format('SELECT * FROM %1$I',tbl), start_id => 7, end_id => 10)),
    6::BIGINT,
    'SHOULD PASS: total number of rows is 6 because there are 5 nodes involved');

  RETURN QUERY
  SELECT is(
    (SELECT agg_cost FROM pgr_TSP(format('SELECT * FROM %1$I',tbl), start_id => 7, end_id => 10) WHERE seq = 1),
    0::FLOAT,
    'start_id => 7, end_id => 10: SHOULD PASS: agg_cost at row 0 is 0.0');

  RETURN QUERY
  SELECT is(
    (SELECT node FROM pgr_TSP(format('SELECT * FROM %1$I',tbl), start_id => 7, end_id => 10) WHERE seq = 1),
    7::BIGINT,
    'start_id => 7, end_id => 10: SHOULD PASS: first node should be 7');

  RETURN QUERY
  SELECT is(
    (SELECT node FROM pgr_TSP(format('SELECT * FROM %1$I',tbl), start_id => 7, end_id => 10) WHERE seq = 6),
    7::BIGINT,
    'start_id => 7, end_id => 10: SHOULD PASS: last node should be 7');

  RETURN QUERY
  SELECT is(
    (SELECT node FROM pgr_TSP(format('SELECT * FROM %1$I',tbl), start_id => 7, end_id => 10) WHERE seq = 5),
    10::BIGINT,
    'SHOULD PASS: second to last node should be 10');

  -- 7, 7
  RETURN QUERY
  SELECT is(
    (SELECT agg_cost FROM pgr_TSP(format('SELECT * FROM %1$I',tbl), start_id => 7, end_id => 7) WHERE seq = 1),
    0::FLOAT,
    'start_id => 7, end_id => 7: SHOULD PASS: agg_cost at row 0 is 0.0');

  RETURN QUERY
  SELECT is(
    (SELECT node FROM pgr_TSP(format('SELECT * FROM %1$I',tbl), start_id => 7, end_id => 7 ) WHERE seq = 1),
    7::BIGINT,
    'T20: start_id => 7, end_id => 7: SHOULD PASS: first node should be 7');

  RETURN QUERY
  SELECT is(
    (SELECT node FROM pgr_TSP(format('SELECT * FROM %1$I',tbl), start_id => 7, end_id => 7) WHERE seq = 6),
    7::BIGINT,
    'start_id => 7, end_id => 7: SHOULD PASS: last node should be 7');


  -- x,10
  RETURN QUERY
  SELECT is(
    (SELECT agg_cost FROM pgr_TSP(format('SELECT * FROM %1$I',tbl), end_id => 10) WHERE seq = 1),
    0::FLOAT,
    'T50: end_id => 10 SHOULD PASS: agg_cost at row 0 is 0.0');

  RETURN QUERY
  SELECT is(
    (SELECT count(*) FROM pgr_TSP(format('SELECT * FROM %1$I',tbl), start_id => 7)),
    6::BIGINT,
    'start_id => 7 SHOULD PASS: total number of rows is 6 because there are 5 nodes involved');

  RETURN QUERY
  SELECT is(
    (SELECT node FROM pgr_TSP(format('SELECT * FROM %1$I',tbl), start_id => 7) WHERE seq = 1),
    7::BIGINT,
    'start_id => 7 SHOULD PASS: first node should be 7');

  RETURN QUERY
  SELECT is(
    (SELECT node FROM pgr_TSP(format('SELECT * FROM %1$I',tbl), start_id => 7) WHERE seq = 6),
    7::BIGINT,
    'start_id => 7 SHOULD PASS: last node should be 7');

  RETURN QUERY
  SELECT is(
    (SELECT agg_cost FROM pgr_TSP(format('SELECT * FROM %1$I',tbl), start_id => 7) WHERE seq = 1),
    0::FLOAT,
    'start_id => 7 SHOULD PASS: agg_cost at row 0 is 0.0');

  -- Tests on the inner query (the matrix)
  RETURN QUERY
  SELECT lives_ok(
    format($$SELECT agg_cost FROM pgr_TSP('SELECT * FROM %1$I WHERE start_vid = 8')$$, tbl),
    'SELECT * FROM data WHERE start_vid = 8: Lives when inner query is empty');

  RETURN QUERY
  SELECT is_empty(
    format($$SELECT agg_cost FROM pgr_TSP('SELECT * FROM %1$I WHERE start_vid = 8')$$, tbl),
    'SELECT * FROM data WHERE start_vid = 8: Inner query is empty');

END;
$code$
language plpgsql;

SELECT tsp_edge_cases('data');
SELECT tsp_edge_cases('data_directed');

SELECT finish();
ROLLBACK;
