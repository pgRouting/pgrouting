
/*PGR-GNU*****************************************************************

Copyright (c) 2018  pgRouting developers
Mail: project@pgrouting.org

------
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 ********************************************************************PGR-GNU*/
BEGIN;

UPDATE edges SET cost = sign(cost), reverse_cost = sign(reverse_cost);
SELECT CASE WHEN min_version('3.8.0') THEN plan(23) WHEN min_version('3.4.0') THEN plan(16) ELSE plan(1) END;


CREATE OR REPLACE FUNCTION edge_cases()
RETURNS SETOF TEXT AS
$BODY$
DECLARE
  the_q TEXT;
BEGIN
  IF NOT min_version('3.4.0') THEN
    RETURN QUERY SELECT skip(1, 'Function added on 3.4.0');
    RETURN;
  END IF;

  PREPARE edges AS
  SELECT id FROM edges;

  PREPARE edges1 AS
  SELECT source FROM edges;

  PREPARE query_1 AS
  SELECT * FROM pgr_degree('edges', 'SELECT * FROM vertices');

  PREPARE query_2 AS
  SELECT * FROM pgr_degree('edges1','SELECT * FROM vertices');

  PREPARE query_3 AS
  SELECT * FROM pgr_degree('edges','SELECT id FROM vertices');

  PREPARE query_4 AS
  SELECT * FROM pgr_degree('edges','SELECT in_edges FROM vertices');

  PREPARE query_5 AS
  SELECT * FROM pgr_degree('edges','SELECT id, in_edges FROM vertices');

  PREPARE query_6 AS
  SELECT * FROM pgr_degree('edges','SELECT id, out_edges FROM vertices');

  RETURN QUERY SELECT lives_ok('query_1', 'Good execution');
  RETURN QUERY SELECT column_missing('query_2', 'id');
  RETURN QUERY SELECT column_missing('query_3', 'in_edges');
  RETURN QUERY SELECT column_missing('query_4', 'id');
  RETURN QUERY SELECT lives_ok('query_5', 'Missing column out_edges but usable');
  RETURN QUERY SELECT lives_ok('query_5', 'Missing column in_edges but usable');
  RETURN QUERY SELECT wrong_relation($$SELECT * FROM pgr_degree('SELECT id FROM foo', 'SELECT * FROM vertices')$$, 'foo');
  RETURN QUERY SELECT wrong_relation($$SELECT * FROM pgr_degree('SELECT id FROM edges', 'SELECT * FROM bar')$$, 'bar');

  PREPARE subedges AS
  SELECT id FROM edges WHERE id < 17;

  PREPARE edges2 AS
  SELECT source FROM edges WHERE id < 17;

  PREPARE query_7 AS
  SELECT * FROM pgr_degree('subedges', 'SELECT * FROM vertices');

  PREPARE query_8 AS
  SELECT * FROM pgr_degree('edges2','SELECT * FROM vertices');

  PREPARE query_9 AS
  SELECT * FROM pgr_degree('subedges','SELECT id FROM vertices');

  PREPARE query_10 AS
  SELECT * FROM pgr_degree('subedges','SELECT in_edges FROM vertices');

  PREPARE query_11 AS
  SELECT * FROM pgr_degree('subedges','SELECT id, in_edges FROM vertices');

  PREPARE query_12 AS
  SELECT * FROM pgr_degree('subedges','SELECT id, out_edges FROM vertices');

  RETURN QUERY SELECT lives_ok('query_7', 'Good execution');
  RETURN QUERY SELECT column_missing('query_8', 'id');
  RETURN QUERY SELECT column_missing('query_9', 'in_edges');
  RETURN QUERY SELECT column_missing('query_10', 'id');
  RETURN QUERY SELECT lives_ok('query_11', 'Missing column out_edges but usable');
  RETURN QUERY SELECT lives_ok('query_12', 'Missing column in_edges but usable');

  PREPARE empty_vertices AS
  SELECT * FROM pgr_degree('SELECT id FROM edges', 'SELECT * FROM vertices WHERE id > 20');
  RETURN QUERY SELECT is_empty('empty_vertices', 'Empty vertices give empty result');

  PREPARE empty_graph AS
  SELECT * FROM pgr_degree('SELECT id FROM edges WHERE id > 20', 'SELECT * FROM vertices') ORDER BY node;

  IF min_version('3.8.0') THEN
     PERFORM todo(1, 'Currently is not empty');
     RETURN QUERY
     SELECT is_empty('empty_graph', 'is empty: Empty edges give 0 count on all vertices so none is in result');
  ELSE
     RETURN QUERY
     SELECT results_eq('empty_graph', 'SELECT generate_series (1,17)::BIGINT, 0::BIGINT', 'Empty edges give 0 count');
  END IF;

  IF NOT min_version('3.8.0') THEN RETURN; END IF;

  -- TESTS FOR edges_sql only

  PREPARE edges_1 AS
  SELECT id, source, target FROM edges;

  PREPARE subedges_1 AS
  SELECT id, source, target FROM edges WHERE id < 17;

  RETURN QUERY
  SELECT set_eq($$SELECT * FROM pgr_degree('edges_1')$$, 'query_1',
    'degree(edges) = degree(edges,vertices)');

  RETURN QUERY
  SELECT set_eq($$SELECT * FROM pgr_degree('subedges_1')$$, 'query_7',
    'degree(subedges) = degree(subedges,vertices)');

  RETURN QUERY SELECT lives_ok($$SELECT * FROM pgr_degree('SELECT id, source, target FROM edges')$$, 'good execution');
  RETURN QUERY SELECT throws_ok($$SELECT * FROM pgr_degree('SELECT source, target FROM edges')$$,
    '42703','column "id" does not exist');
  RETURN QUERY SELECT throws_ok($$SELECT * FROM pgr_degree('SELECT id, target FROM edges')$$,
    '42703','column "source" does not exist');
  RETURN QUERY SELECT throws_ok($$SELECT * FROM pgr_degree('SELECT id, source FROM edges')$$,
    '42703','column "target" does not exist');
  RETURN QUERY SELECT wrong_relation($$SELECT * FROM pgr_degree('SELECT id FROM foo')$$, 'foo');


END;
$BODY$
LANGUAGE plpgsql;

SELECT edge_cases();

SELECT finish();
ROLLBACK;
