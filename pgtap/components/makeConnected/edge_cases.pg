
/*PGR-GNU*****************************************************************

Copyright (c) 2018  pgRouting developers
Mail: project@pgrouting.org

------
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 ********************************************************************PGR-GNU*/
BEGIN;

UPDATE edges SET cost = sign(cost), reverse_cost = sign(reverse_cost);
SELECT CASE WHEN NOT min_version('3.2.0') THEN plan(1) ELSE plan(20) END;


CREATE OR REPLACE FUNCTION edge_cases()
RETURNS SETOF TEXT AS
$BODY$
BEGIN

IF NOT min_version('3.2.0') THEN
  RETURN QUERY
  SELECT skip(1, 'Function is new on 3.2.0');
  RETURN;
END IF;

-- 0 edge, 0 vertex tests

PREPARE q1 AS
SELECT id, source, target, cost, reverse_cost
FROM edges
WHERE id > 18;

-- Graph is empty - it has 0 edge and 0 vertex
RETURN QUERY
SELECT is_empty('q1', 'q1: Graph with 0 edge and 0 vertex');

-- 0 edge, 0 vertex tests

PREPARE makeConnected2 AS
SELECT *
FROM pgr_makeConnected('q1');

RETURN QUERY
SELECT is_empty('makeConnected2', '2: Graph with 0 edge and 0 vertex -> Empty row is returned');

-- vertex not present in graph tests

PREPARE q3 AS
SELECT id, source, target, cost, reverse_cost
FROM edges WHERE source = 50;

RETURN QUERY
SELECT is_empty('q3','3: Vertex 50 does not exist in sample data');

PREPARE vertexNotPresent4 AS
SELECT *
FROM pgr_makeConnected('q3');

RETURN QUERY
SELECT is_empty('vertexNotPresent4', '4: Vertex Not present in the graph -> Empty row is returned');

-- 1 vertex tests

PREPARE q5 AS
SELECT id, source, source AS target, cost, reverse_cost
FROM edges
WHERE id = 9;
-- Graph with only vertex 9
RETURN QUERY
SELECT set_eq('q5', $$VALUES (9, 11, 11, 1, 1)$$, 'q5: u<->u');

PREPARE oneVertexTest6 AS
SELECT *
FROM pgr_makeConnected('q5');

RETURN QUERY
SELECT is_empty('oneVertexTest6', '6: u<->u already Connected -> Empty row');

-- 2 vertices tests ===> Already Connected

PREPARE q7 AS
SELECT id, source, target, cost, reverse_cost
FROM edges
WHERE id = 1;

RETURN QUERY
SELECT set_eq('q7', $$VALUES (1, 5, 6, 1, 1)$$, 'q9: u<->v');

PREPARE twoVerticesTest8 AS
SELECT *
FROM pgr_makeConnected('q7');

RETURN QUERY
SELECT is_empty('twoVerticesTest8', '8:  u<->v is Connected -> Empty row');

-- 2 vertices tests ===> Not Connected

PREPARE q9 AS
SELECT id, source, source AS target, cost, reverse_cost FROM edges WHERE id = 2
                          UNION
SELECT id, source, source AS target, cost, reverse_cost FROM edges WHERE id = 9;

RETURN QUERY
SELECT set_eq('q9', $$VALUES (2, 6, 6, -1, 1), (9, 11, 11, 1, 1)$$, 'q9: u<->u v<->v');

PREPARE twoVerticesTest10 AS
SELECT count(*)
FROM pgr_makeConnected('q9');

RETURN QUERY
SELECT results_eq('twoVerticesTest10', 'SELECT 1::BIGINT', '10: u<->u v<->v  => One row');


-- 3 vertices tests ====> Already Connnected

PREPARE q11 AS
SELECT id, source, target, cost, reverse_cost
FROM edges
WHERE id IN (1,2);

RETURN QUERY
SELECT set_eq('q11', $$VALUES (1, 5, 6, 1, 1), (2, 6, 10, -1, 1)$$, 'q11: u<->v<-w');

PREPARE threeVerticesTest12 AS
SELECT *
FROM pgr_makeConnected('q11');

RETURN QUERY
SELECT is_empty('threeVerticesTest12', '12: u<->v<-w already Connected => Empty');



-- 3 vertices tests ====> Not Connnected

PREPARE q13 AS
SELECT id,  source, source AS target, cost, reverse_cost FROM edges WHERE id = 2
                                UNION
SELECT id, source, source AS target, cost, reverse_cost FROM edges WHERE id = 9;

RETURN QUERY
SELECT set_eq('q13', $$VALUES (2, 6, 6, -1, 1), (9, 11, 11, 1, 1)$$, 'q13: u->u v<->v');

PREPARE threeVerticesTest14 AS
SELECT count(*)
FROM pgr_makeConnected('q13');

RETURN QUERY
SELECT results_eq('threeVerticesTest14', $$SELECT 1::BIGINT$$, 'u->u v<->v  => One row');


-- 4 vertex tests ===> Cyclic

PREPARE q15 AS
SELECT id, source, target, cost, reverse_cost
FROM edges
WHERE id IN (8, 10, 11, 12);

RETURN QUERY
SELECT set_eq('q15',
    $$VALUES
        (8, 7, 11, 1, 1),
        (10, 7, 8, 1, 1),
        (11, 11, 12, 1, -1),
        (12, 8, 12, 1, -1)
    $$,
    'q15:  8<->7<->11->12->8'
);

PREPARE fourVerticesCyclicTest16 AS
SELECT *
FROM pgr_makeConnected('q15');
RETURN QUERY
SELECT is_empty('fourVerticesCyclicTest16', '14: 8<->7<->11->12->8 => Empty');

-- 4 vertex tests ===> Not Connected

PREPARE q17 AS
SELECT id, source, target, cost, reverse_cost
FROM edges
WHERE id IN (1,6);

RETURN QUERY
SELECT set_eq('q17', $$VALUES (1, 5, 6, 1, 1), (6, 1, 3, 1, 1)$$, 'q17: u<->v w<->z');

PREPARE fourVerticesTest18 AS
SELECT count(*)
FROM pgr_makeConnected('q17');

RETURN QUERY
SELECT set_eq('fourVerticesTest18', $$SELECT 1::BIGINT$$, '18: u<->v w<->z => One row');


PREPARE q19 AS
SELECT id, source, target, cost, reverse_cost
FROM edges
WHERE id IN (17,18);

RETURN QUERY
SELECT set_eq('q19', $$VALUES (17, 2, 4, 1, 1), (18, 13, 14, 1, 1)$$, 'q19: u<->v w<->z => One row');

PREPARE fourVerticesTest20 AS
SELECT count(*)
FROM pgr_makeConnected('q19');

RETURN QUERY
SELECT set_eq('fourVerticesTest20', $$SELECT 1::BIGINT$$, '18: u<->v w<->z => One row');

END;
$BODY$
LANGUAGE plpgsql;

SELECT edge_cases();



SELECT * FROM finish();
ROLLBACK;
