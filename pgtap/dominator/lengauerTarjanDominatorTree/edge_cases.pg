
/*PGR-GNU*****************************************************************

Copyright (c) 2018  pgRouting developers
Mail: project@pgrouting.org

------
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 ********************************************************************PGR-GNU*/
BEGIN;
UPDATE edges SET cost = sign(cost), reverse_cost = sign(reverse_cost);
SELECT CASE WHEN NOT min_version('3.2.0') THEN plan(1) ELSE plan(11) END;

CREATE OR REPLACE FUNCTION edge_cases()
RETURNS SETOF TEXT AS
$BODY$
BEGIN

IF NOT min_version('3.2.0') THEN
  RETURN QUERY
  SELECT skip(1, 'Function is new on 3.2.0');
  RETURN;
END IF;

-- 0 edge 0 vertex test

PREPARE q1 AS
SELECT id, source, target, cost, reverse_cost
FROM edges
WHERE id > 18;
RETURN QUERY
SELECT is_empty('q1', 'q1: Graph with 0 edge and 0 vertex');


PREPARE ltd_test1 AS
SELECT *
FROM pgr_lengauerTarjanDominatorTree(
'q1',1
);

RETURN QUERY
SELECT is_empty('ltd_test1', 'test1: Graph with 0 edge and 0 vertex');



-- single vertex test

PREPARE q2 AS
SELECT id, source, source AS target, cost, reverse_cost
FROM edges
WHERE id = 1;

RETURN QUERY
SELECT set_eq('q2', $$VALUES (1, 5, 5, 1, 1)$$, 'graph2: u<->u');

/*
PERFORM todo('triggers an assertion when the vertex does not exist', 1);
PREPARE ltd_test2_1 AS
SELECT *
FROM pgr_lengauerTarjanDominatorTree(
'q2',6
);
RETURN QUERY
SELECT lives_ok('ltd_test2_1', 'test2: Triggers an assertion');
*/

PREPARE ltd_test2 AS
SELECT *
FROM pgr_lengauerTarjanDominatorTree(
'q2',5
);
RETURN QUERY
SELECT set_eq('ltd_test2', $$VALUES (1, 5, 0)$$, 'test2: u<->u');



-- 2 vertices test (connected)

PREPARE q3 AS
SELECT id, source, target, cost, reverse_cost
FROM edges
WHERE id = 1;

RETURN QUERY
SELECT set_eq('q3', $$VALUES (1, 5, 6, 1, 1)$$, 'q3: u<->v');

PREPARE ltd_test3 AS
SELECT *
FROM pgr_lengauerTarjanDominatorTree(
    'q3',5
);

RETURN QUERY
SELECT set_eq('ltd_test3', $$VALUES (1, 5, 0),(2, 6, 1)$$, 'test3:  u<->v');



-- 3 vertices test

PREPARE q4 AS
SELECT id, source, target, cost, reverse_cost
FROM edges
WHERE id <= 2;

RETURN QUERY
SELECT set_eq('q4', $$VALUES (1, 5, 6, 1, 1), (2, 6, 10, -1, 1)$$, 'graph4: u<->v<-w');


PREPARE ltd_test4 AS
SELECT *
FROM pgr_lengauerTarjanDominatorTree(
'q4',5
);

RETURN QUERY
SELECT set_eq('ltd_test4', $$VALUES (1, 5, 0),(2, 6, 1),(3, 10, 0)$$, 'test3:  u<->v<-w');


-- 4 vertices test

PREPARE q5 AS
SELECT id, source, target, cost, reverse_cost
FROM edges
WHERE id <= 3;

RETURN QUERY
SELECT set_eq('q5',
    $$VALUES
        (1, 5, 6, 1, 1),
        (2, 6, 10, -1, 1),
        (3, 10, 15, -1, 1)
    $$,
    'graph5: u<->v<-w<-z'
);

PREPARE ltd_test5 AS
SELECT *
FROM pgr_lengauerTarjanDominatorTree(
'q5',5
);

RETURN QUERY
SELECT set_eq('ltd_test5', $$VALUES (1, 10, 0),(2, 15, 0),(3, 5, 0), (4, 6, 3)$$, 'test5: u<->v<-w<-z root 5');


PREPARE ltd_test6 AS
SELECT *
FROM pgr_lengauerTarjanDominatorTree(
'q5',15
);

RETURN QUERY
SELECT set_eq('ltd_test6', $$VALUES (1, 10, 2),(2,15,0),(3, 5, 4),(4, 6, 1)$$, 'test6: u<->v<-w<-z root 15');

END;
$BODY$
LANGUAGE plpgsql;

SELECT edge_cases();

SELECT * FROM finish();
ROLLBACK;
