
/*PGR-GNU*****************************************************************

Copyright (c) 2018  pgRouting developers
Mail: project@pgrouting.org

------
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 ********************************************************************PGR-GNU*/
BEGIN;

UPDATE edges SET cost = sign(cost), reverse_cost = sign(reverse_cost);
SELECT CASE WHEN min_version('3.6.0') THEN plan (96) ELSE plan(1) END;

PREPARE edges AS
SELECT id, source, target, cost, reverse_cost FROM edges;

PREPARE null_ret AS
SELECT id FROM vertices WHERE id IN (-1);

PREPARE null_ret_arr AS
SELECT array_agg(id) FROM vertices WHERE id IN (-1);

PREPARE combinations AS
SELECT source, target FROM combinations;

PREPARE null_combinations AS
SELECT source, target FROM combinations WHERE source IN (-1);

CREATE OR REPLACE FUNCTION test_function()
RETURNS SETOF TEXT AS
$BODY$
DECLARE
params TEXT[];
subs TEXT[];
BEGIN

    IF NOT min_version('3.6.0') THEN
        RETURN QUERY SELECT skip(1, 'pgr_withPointsKSP testing only valid signatures on 4.0.0');
        RETURN;
    END IF;

    -- one to one
    params = ARRAY[
    '$$SELECT id, source, target, cost, reverse_cost FROM edges$$',
    '5::BIGINT',
    '6::BIGINT',
    '3'
    ]::TEXT[];
    subs = ARRAY[
    'NULL',
    '(SELECT id FROM vertices WHERE id IN (-1))',
    '(SELECT id FROM vertices WHERE id IN (-1))',
    'NULL::INTEGER'
    ]::TEXT[];

    RETURN query SELECT * FROM no_crash_test('pgr_ksp', params, subs);

    subs = ARRAY[
    'NULL',
    'NULL::BIGINT',
    'NULL::BIGINT',
    'NULL::INTEGER'
    ]::TEXT[];
    RETURN query SELECT * FROM no_crash_test('pgr_ksp', params, subs);

    -- one to many
    params = ARRAY[
    '$$SELECT id, source, target, cost, reverse_cost FROM edges$$',
    '5::BIGINT',
    'ARRAY[6, 7]::BIGINT[]',
    '2'
    ]::TEXT[];
    subs = ARRAY[
    'NULL',
    '(SELECT id FROM vertices WHERE id IN (-1))',
    '(SELECT id FROM vertices WHERE id IN (-1))',
    'NULL::INTEGER'
    ]::TEXT[];

    RETURN query SELECT * FROM no_crash_test('pgr_ksp', params, subs);

    subs = ARRAY[
    'NULL',
    'NULL::BIGINT',
    'NULL::BIGINT[]',
    'NULL::INTEGER'
    ]::TEXT[];
    RETURN query SELECT * FROM no_crash_test('pgr_ksp', params, subs);

    -- many to one
    params = ARRAY[
    '$$SELECT id, source, target, cost, reverse_cost FROM edges$$',
    'ARRAY[6, 7]::BIGINT[]',
    '5',
    '2'
    ]::TEXT[];
    subs = ARRAY[
    'NULL',
    '(SELECT id FROM vertices WHERE id IN (-1))',
    '(SELECT id FROM vertices WHERE id IN (-1))',
    'NULL::INTEGER'
    ]::TEXT[];

    RETURN query SELECT * FROM no_crash_test('pgr_ksp', params, subs);

    subs = ARRAY[
    'NULL',
    'NULL::BIGINT[]',
    'NULL::BIGINT',
    'NULL::INTEGER'
    ]::TEXT[];
    RETURN query SELECT * FROM no_crash_test('pgr_ksp', params, subs);

    -- many to many
    params = ARRAY[
    '$$SELECT id, source, target, cost, reverse_cost FROM edges$$',
    'ARRAY[5]::BIGINT[]', 'ARRAY[6,7]::BIGINT[]',
    '1'
    ]::TEXT[];
    subs = ARRAY[
    'NULL',
    '(SELECT array_agg(id) FROM vertices WHERE id IN (-1))',
    '(SELECT array_agg(id) FROM vertices WHERE id IN (-1))',
    'NULL::INTEGER'
    ]::TEXT[];

    RETURN query SELECT * FROM no_crash_test('pgr_ksp', params, subs);

    subs = ARRAY[
    'NULL',
    'NULL::BIGINT[]',
    'NULL::BIGINT[]',
    'NULL::INTEGER'
    ]::TEXT[];
    RETURN query SELECT * FROM no_crash_test('pgr_ksp', params, subs);

    -- Combinations SQL

    params = ARRAY[
    '$$SELECT id, source, target, cost, reverse_cost FROM edges$$',
    '$$combinations$$',
    '1'
    ]::TEXT[];
    subs = ARRAY[
    'NULL',
    '$$(SELECT source, target FROM combinations WHERE source IN (-1))$$',
    'NULL::INTEGER'
    ]::TEXT[];

    RETURN query SELECT * FROM no_crash_test('pgr_ksp', params, subs);

    subs = ARRAY[
    'NULL',
    'NULL::TEXT',
    'NULL::INTEGER'
    ]::TEXT[];
    RETURN query SELECT * FROM no_crash_test('pgr_ksp', params, subs);

END
$BODY$
LANGUAGE plpgsql VOLATILE;


SELECT * FROM test_function();

SELECT finish();
ROLLBACK;
