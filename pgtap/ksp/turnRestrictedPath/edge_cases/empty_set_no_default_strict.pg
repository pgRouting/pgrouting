
/*PGR-GNU*****************************************************************

Copyright (c) 2018  pgRouting developers
Mail: project@pgrouting.org

------
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 ********************************************************************PGR-GNU*/
BEGIN;

UPDATE edges SET cost = sign(cost), reverse_cost = sign(reverse_cost);
SELECT CASE WHEN min_version('4.0.0') THEN plan(20) ELSE plan(1) END;

----------------------------------------------------------------------------------------------------------------
-- testing from an existing starting vertex to a non-existing destination
----------------------------------------------------------------------------------------------------------------

CREATE or REPLACE FUNCTION custom_tap()
RETURNS SETOF TEXT AS
$BODY$
BEGIN

  IF NOT min_version('4.0.0') THEN
    RETURN QUERY
    SELECT skip(1, 'pgr_turnrestrictedpath: testing only signatures standardaized in v4.0.0.');
    RETURN;
  END IF;

-- in directed graph
-- with restrictions
PREPARE q1 AS
SELECT * FROM pgr_turnRestrictedPath(
    'SELECT id, source, target, cost, reverse_cost FROM edges WHERE id = 4 OR id = 7',
    'SELECT * FROM restrictions WHERE id IN (1)',
    6, 10,
    3,
    strict := false
);


-- in undirected graph
-- with restrictions
PREPARE q2 AS
SELECT * FROM pgr_turnRestrictedPath(
    'SELECT id, source, target, cost, reverse_cost FROM edges WHERE id = 4 OR id = 7',
    'SELECT * FROM restrictions WHERE id IN (1)',
    6, 10,
    3,
    FALSE,
    strict := false
);

-- in directed graph
-- without restrictions
PREPARE q3 AS
SELECT * FROM pgr_turnRestrictedPath(
    'SELECT id, source, target, cost, reverse_cost FROM edges WHERE id = 4 OR id = 7',
    'SELECT * FROM restrictions where id > 10',
    6, 10,
    3,
    strict := false
);

-- in undirected graph
-- without restrictions
PREPARE q4 AS
SELECT * FROM pgr_turnRestrictedPath(
    'SELECT id, source, target, cost, reverse_cost FROM edges WHERE id = 4 OR id = 7',
    'SELECT * FROM restrictions where id > 10',
    6, 10,
    3,
    FALSE,
    strict := false
);

RETURN QUERY SELECT is_empty('q1');
RETURN QUERY SELECT is_empty('q2');
RETURN QUERY SELECT is_empty('q3');
RETURN QUERY SELECT is_empty('q4');

----------------------------------------------------------------------------------------------------------------
-- testing from an non-existing starting vertex to an existing destination
----------------------------------------------------------------------------------------------------------------

-- in directed graph
-- with restrictions
PREPARE q5 AS
SELECT * FROM pgr_turnRestrictedPath(
    'SELECT id, source, target, cost, reverse_cost FROM edges WHERE id = 4 OR id = 7',
    'SELECT * FROM restrictions WHERE id IN (1)',
    11, 3,
    3,
    strict := false
);

-- in undirected graph
-- with restrictions
PREPARE q6 AS
SELECT * FROM pgr_turnRestrictedPath(
    'SELECT id, source, target, cost, reverse_cost FROM edges WHERE id = 4 OR id = 7',
    'SELECT * FROM restrictions WHERE id IN (1)',
    11, 3,
    3,
    FALSE,
    strict := false
);

-- in directed graph
-- without restrictions
PREPARE q7 AS
SELECT * FROM pgr_turnRestrictedPath(
    'SELECT id, source, target, cost, reverse_cost FROM edges WHERE id = 4 OR id = 7',
    'SELECT * FROM restrictions where id > 10',
    11, 3,
    3,
    strict := false
);

-- in undirected graph
-- without restrictions
PREPARE q8 AS
SELECT * FROM pgr_turnRestrictedPath(
    'SELECT id, source, target, cost, reverse_cost FROM edges WHERE id = 4 OR id = 7',
    'SELECT * FROM restrictions where id > 10',
    11, 3,
    3,
    FALSE,
    strict := false
);

RETURN QUERY SELECT is_empty('q5');
RETURN QUERY SELECT is_empty('q6');
RETURN QUERY SELECT is_empty('q7');
RETURN QUERY SELECT is_empty('q8');

----------------------------------------------------------------------------------------------------------------
-- testing from a non-existing starting vertex to a non-existing destination
----------------------------------------------------------------------------------------------------------------

-- in directed graph
-- with restrictions
PREPARE q9 AS
SELECT * FROM pgr_turnRestrictedPath(
    'SELECT id, source, target, cost, reverse_cost FROM edges WHERE id = 4 OR id = 7',
    'SELECT * FROM restrictions WHERE id IN (1)',
    5, 14,
    3,
    strict := false
);

-- in undirected graph
-- with restrictions
PREPARE q10 AS
SELECT * FROM pgr_turnRestrictedPath(
    'SELECT id, source, target, cost, reverse_cost FROM edges WHERE id = 4 OR id = 7',
    'SELECT * FROM restrictions WHERE id IN (1)',
    5, 14,
    3,
    FALSE,
    strict := false
);

-- in directed graph
-- without restrictions
PREPARE q11 AS
SELECT * FROM pgr_turnRestrictedPath(
    'SELECT id, source, target, cost, reverse_cost FROM edges WHERE id = 4 OR id = 7',
    'SELECT * FROM restrictions where id > 10',
    5, 14,
    3,
    strict := false
);

-- in undirected graph
-- without restrictions
PREPARE q12 AS
SELECT * FROM pgr_turnRestrictedPath(
    'SELECT id, source, target, cost, reverse_cost FROM edges WHERE id = 4 OR id = 7',
    'SELECT * FROM restrictions where id > 10',
    5, 14,
    3,
    FALSE,
    strict := false
);

RETURN QUERY SELECT is_empty('q9');
RETURN QUERY SELECT is_empty('q10');
RETURN QUERY SELECT is_empty('q11');
RETURN QUERY SELECT is_empty('q12');

----------------------------------------------------------------------------------------------------------------
-- testing from an existing starting vertex to the same destination
----------------------------------------------------------------------------------------------------------------

-- in directed graph
-- with restrictions
PREPARE q13 AS
SELECT * FROM pgr_turnRestrictedPath(
    'SELECT id, source, target, cost, reverse_cost FROM edges WHERE id = 4 OR id = 7',
    'SELECT * FROM restrictions WHERE id IN (1)',
    6, 6,
    3,
    strict := false
);

-- in undirected graph
-- with restrictions
PREPARE q14 AS
SELECT * FROM pgr_turnRestrictedPath(
    'SELECT id, source, target, cost, reverse_cost FROM edges WHERE id = 4 OR id = 7',
    'SELECT * FROM restrictions WHERE id IN (1)',
    6, 6,
    3,
    FALSE,
    strict := false
);

-- in directed graph
-- without restrictions
PREPARE q15 AS
SELECT * FROM pgr_turnRestrictedPath(
    'SELECT id, source, target, cost, reverse_cost FROM edges WHERE id = 4 OR id = 7',
    'SELECT * FROM restrictions where id > 10',
    6, 6,
    3,
    strict := false
);

-- in undirected graph
-- without restrictions
PREPARE q16 AS
SELECT * FROM pgr_turnRestrictedPath(
    'SELECT id, source, target, cost, reverse_cost FROM edges WHERE id = 4 OR id = 7',
    'SELECT * FROM restrictions where id > 10',
    6, 6,
    3,
    FALSE,
    strict := false
);

RETURN QUERY SELECT is_empty('q13');
RETURN QUERY SELECT is_empty('q14');
RETURN QUERY SELECT is_empty('q15');
RETURN QUERY SELECT is_empty('q16');

----------------------------------------------------------------------------------------------------------------
-- testing from an existing starting vertex in one component to an existing destination in another component
----------------------------------------------------------------------------------------------------------------
-- in directed graph
-- with restrictions
PREPARE q17 AS
SELECT * FROM pgr_turnRestrictedPath(
    'SELECT id, source, target, cost, reverse_cost FROM edges WHERE id IN (4, 7, 17)',
    'SELECT * FROM restrictions WHERE id IN (1)',
    6, 2,
    3,
    strict := false
);

-- in undirected graph
-- with restrictions
PREPARE q18 AS
SELECT * FROM pgr_turnRestrictedPath(
    'SELECT id, source, target, cost, reverse_cost FROM edges WHERE id IN (4, 7, 17)',
    'SELECT * FROM restrictions WHERE id IN (1)',
    6, 2,
    3,
    FALSE,
    strict := false
);

-- in directed graph
-- without restrictions
PREPARE q19 AS
SELECT * FROM pgr_turnRestrictedPath(
    'SELECT id, source, target, cost, reverse_cost FROM edges WHERE id IN (4, 7, 17)',
    'SELECT * FROM restrictions where id > 10',
    6, 2,
    3,
    strict := false
);

-- in undirected graph
-- without restrictions
PREPARE q20 AS
SELECT * FROM pgr_turnRestrictedPath(
    'SELECT id, source, target, cost, reverse_cost FROM edges WHERE id IN (4, 7, 17)',
    'SELECT * FROM restrictions where id > 10',
    6, 2,
    3,
    FALSE,
    strict := false
);


RETURN QUERY SELECT is_empty('q17');
RETURN QUERY SELECT is_empty('q18');
RETURN QUERY SELECT is_empty('q19');
RETURN QUERY SELECT is_empty('q20');

END;
$BODY$
language plpgsql;

SELECT * FROM custom_tap();
SELECT * FROM finish();
ROLLBACK;
