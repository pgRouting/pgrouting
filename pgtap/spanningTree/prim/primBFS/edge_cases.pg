
/*PGR-GNU*****************************************************************

Copyright (c) 2018  pgRouting developers
Mail: project@pgrouting.org

------
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 ********************************************************************PGR-GNU*/
BEGIN;

SELECT plan(13);

UPDATE edges SET cost = sign(cost) + 0.001 * id * id, reverse_cost = sign(reverse_cost) + 0.001 * id * id;

--
PREPARE prim1 AS
SELECT * FROM pgr_primBFS(
    'SELECT id, source, target, cost, reverse_cost
    FROM edges WHERE id > 18 ORDER BY id',
    21, 3
);

SELECT set_eq('prim1',
    $$VALUES (1, 0, 21, 21, -1, 0, 0) $$,
    '1: Empty Graph -> Only root vertex is returned');


PREPARE prim2 AS
SELECT *
FROM pgr_primBFS(
    'SELECT id, source, target, cost
     FROM edges WHERE id > 18 ORDER BY id',
    ARRAY[21, 45],
    3
);

SELECT set_eq('prim2',
    $$VALUES
        (1, 0, 21, 21, -1, 0, 0),
        (2, 0, 45, 45, -1, 0, 0)
    $$,
    '2: Empty graph -> Only root vertices are returned');


--
PREPARE prim3 AS
SELECT *
FROM pgr_primBFS(
    'SELECT id, source, target, cost, reverse_cost
     FROM edges ORDER BY id',
    21, 3
);

SELECT set_eq('prim3',
    $$VALUES (1, 0, 21, 21, -1, 0, 0) $$,
    '3: Root not in Graph -> Only root vertex is returned');

--
PREPARE prim4 AS
SELECT seq, start_vid, depth, edge, agg_cost <= 3.5
FROM pgr_primBFS(
    'SELECT id, source, target, cost
     FROM edges ORDER BY id',
    ARRAY[21, 15],
    3
);

SELECT set_eq('prim4',
    $$VALUES
        (1, 15, 0, -1, true),
        (2, 15, 1, 16, true),
        (3, 15, 2,  9, true),
        (4, 15, 3,  5, true),
        (5, 15, 3,  8, true),
        (6, 15, 3, 11, true),
        (7, 21, 0, -1, true)
    $$,
    '4: Root not in Graph -> Only root vertex is returned, Root in graph -> spanning tree is returned');


--
PREPARE prim5 AS
SELECT seq, start_vid, depth, edge, depth <= 3
FROM pgr_primBFS(
    'SELECT id, source, target, cost, reverse_cost
    FROM edges ORDER BY id',
    0, 3
);

SELECT set_eq('prim5',
    $$VALUES
        (1, 1, 0, -1, true),
        (2, 1, 1, 6, true),
        (3, 1, 2, 7, true),
        (4, 1, 3, 4, true),
        (5, 1, 3, 10, true),
        (6, 2, 0, -1, true),
        (7, 2, 1, 17, true),
        (8, 13, 0, -1, true),
        (9, 13, 1, 18, true)
    $$,
    '5: root = 0 -> forest (with random root vertices)');

--
PREPARE prim6 AS
SELECT *
FROM pgr_primBFS(
    'SELECT id, source, target, cost, reverse_cost
    FROM edges ORDER BY id',
    4, -3
);


SELECT throws_ok('prim6',
    'P0001',
    'Negative value found on ''max_depth''',
    '6: Negative max_depth throws');



PREPARE prim7 AS
SELECT *
FROM pgr_primBFS(
    'SELECT id, source, target, cost, reverse_cost
    FROM edges ORDER BY id',
    ARRAY[15, 8], -3
);

SELECT throws_ok('prim7',
    'P0001',
    'Negative value found on ''max_depth''',
    '7: Negative max_depth throws');

--
PREPARE prim8 AS
SELECT *
FROM pgr_primBFS(
    'SELECT id, source, target, cost, reverse_cost
    FROM edges ORDER BY id',
    15, 0
);

SELECT set_eq('prim8',
    $$VALUES (1, 0, 15, 15, -1, 0, 0) $$,
    '8: 0 max_depth -> Only root vertex is returned');

--
PREPARE prim9 AS
SELECT seq, depth, edge, depth <= 9223372036854775807
FROM pgr_primBFS(
    'SELECT id, source, target, cost, reverse_cost
    FROM edges ORDER BY id',
    15
);

SELECT set_eq('prim9',
    $$VALUES
        (1,  0,  -1, true),
        (2,  1,   3, true),
        (3,  2,   2, true),
        (4,  2,   5, true),
        (5,  3,   1, true),
        (6,  3,   4, true),
        (7,  3,   9, true),
        (8,  3,  11, true),
        (9,  4,   7, true),
        (10, 4,  10, true),
        (11, 4,  13, true),
        (12, 5,   6, true),
        (13, 5,  14, true)
    $$,
    '9: default max_depth -> complete tree from root');

--
PREPARE prim10 AS
SELECT seq, start_vid, depth, edge, depth <= 9223372036854775807
FROM pgr_primBFS(
    'SELECT id, source, target, cost, reverse_cost
    FROM edges ORDER BY id',
    0
);

SELECT set_eq('prim10',
    $$VALUES
       (1,  1, 0, -1, true),
       (2,  1, 1, 6, true),
       (3,  1, 2, 7, true),
       (4,  1, 3, 4, true),
       (5,  1, 3,10, true),
       (6,  1, 4, 1, true),
       (7,  1, 4, 2, true),
       (8,  1, 4,14, true),
       (9,  1, 5, 3, true),
       (10, 1, 5, 5, true),
       (11, 1, 6, 9, true),
       (12, 1, 6,11, true),
       (13, 1, 7,13, true),
       (14, 2, 0,-1, true),
       (15, 2, 1,17, true),
       (16, 13, 0,-1, true),
       (17, 13, 1,18, true)
    $$,
    '10: root = 0 -> forest (with random root vertices)');

--
PREPARE prim11 AS
SELECT * FROM pgr_primBFS(
  'SELECT id, source, target, cost, reverse_cost
    FROM edges', 18
);

SELECT set_eq('prim11', 'VALUES (1, 0, 18, 18, -1, 0, 0)', 'Vertex 18 does not exist');

--
PREPARE prim12 AS
SELECT *
FROM pgr_primBFS(
    'SELECT id, source, target, cost, reverse_cost
       FROM edges ORDER BY id', 4)
WHERE cost < 0;

SELECT is_empty('prim12', 'No cost can be negative');

--
PREPARE prim13 AS
SELECT *
FROM pgr_primBFS(
    'SELECT id, source, target, cost, reverse_cost
       FROM edges ', 13
);

SELECT set_eq('prim13',
  'VALUES
   (1, 0, 13, 13, -1, 0, 0),
   (2, 1, 13, 14, 18, 1.324, 1.324)' , 'Compare when node is 16 with expected result');

SELECT * FROM finish();
ROLLBACK;
