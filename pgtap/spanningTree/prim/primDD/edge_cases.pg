
/*PGR-GNU*****************************************************************

Copyright (c) 2018  pgRouting developers
Mail: project@pgrouting.org

------
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 ********************************************************************PGR-GNU*/
BEGIN;

SELECT plan(9);

UPDATE edges SET cost = sign(cost) + 0.001 * id * id, reverse_cost = sign(reverse_cost) + 0.001 * id * id;

--
PREPARE prim1 AS
SELECT *
FROM pgr_primDD(
    'SELECT id, source, target, cost, reverse_cost
    FROM edges WHERE id > 18 ORDER BY id',
    21, 3.5
);

SELECT set_eq('prim1',
    $$VALUES (1,0,21,21,-1,0,0) $$,
    '1: Empty Graph -> Only root vertex is returned');


PREPARE prim2 AS
SELECT *
FROM pgr_primDD(
    'SELECT id, source, target, cost
     FROM edges WHERE id > 18 ORDER BY id',
    ARRAY[21, 45],
    3.5
);

SELECT set_eq('prim2',
    $$VALUES
        (1,0,21,21,-1,0,0),
        (2,0,45,45,-1,0,0)
    $$,
    '2: Empty graph -> Only root vertices are returned');


--
PREPARE prim3 AS
SELECT *
FROM pgr_primDD(
    'SELECT id, source, target, cost, reverse_cost
     FROM edges ORDER BY id',
    21, 3
);

SELECT set_eq('prim3',
    $$VALUES (1,0,21,21,-1,0,0) $$,
    '1: Root not in Graph -> Only root vertex is returned');

--
PREPARE prim4 AS
SELECT seq, start_vid, depth, edge, agg_cost <= 3.5
FROM pgr_primDD(
    'SELECT id, source, target, cost
     FROM edges ORDER BY id',
    ARRAY[21, 15],
    3.5
);

SELECT set_eq('prim4',
    $$VALUES
        (1,15,0,-1,true),
        (2,15,1,16,true),
        (3,15,2,9,true),
        (4,15,3,5,true),
        (5,15,3,8,true),
        (6,15,3,11,true),
        (7,21,0,-1,true)
    $$,
    '4: Root not in Graph -> Only root vertex is returned, Root in graph -> spanning tree is returned');


--
PREPARE prim5 AS
SELECT seq, start_vid, depth, edge, agg_cost <= 3.5
FROM pgr_primDD(
    'SELECT id, source, target, cost, reverse_cost
    FROM edges ORDER BY id',
    0, 3.5
);

SELECT set_eq('prim5',
    $$VALUES
        (1,5,0,-1,true),
        (2,5,1,1,true),
        (3,5,2,2,true),
        (4,5,3,3,true),
        (5,5,3,5,true),
        (6,5,2,4,true),
        (7,5,3,7,true),
        (8,5,3,10,true),
        (9,2,0,-1,true),
        (10,2,1,17,true),
        (11,13,0,-1,true),
        (12,13,1,18,true)
    $$,
    '5: root = 0 -> forset (with random root vertices)');


PREPARE prim6 AS
SELECT *
FROM pgr_primDD(
    'SELECT id, source, target, cost, reverse_cost
     FROM edges ORDER BY id',
    15, -3
);

SELECT throws_ok('prim6',
    'P0001',
    'Negative value found on ''distance''',
    '6: Negative distance throws');



PREPARE prim7 AS
SELECT *
FROM pgr_primDD(
    'SELECT id, source, target, cost, reverse_cost
     FROM edges ORDER BY id',
    ARRAY[15, 8], -3
);

SELECT throws_ok('prim7',
    'P0001',
    'Negative value found on ''distance''',
    '7:Negative distance throws');

--
PREPARE prim8 AS
SELECT *
FROM pgr_primDD(
    'SELECT id, source, target, cost, reverse_cost
    FROM edges ORDER BY id',
    15, 0
);

SELECT set_eq('prim8',
    $$VALUES (1,0,15,15,-1,0,0) $$,
    '8: 0 distance -> Only root vertex is returned');


--
PREPARE prim9 AS
SELECT seq, depth, edge
FROM pgr_primDD(
    'SELECT id, source, target, cost, reverse_cost
    FROM edges ORDER BY id',
    15, 'Infinity'
);

SELECT set_eq('prim9',
    $$VALUES
       (1,  0, -1),
       (2,  1,  3),
       (3,  2,  2),
       (4,  3,  1),
       (5,  3,  4),
       (6,  4,  7),
       (7,  5,  6),
       (8,  4, 10),
       (9,  5, 14),
      (10,  2,  5),
      (11,  3,  9),
      (12,  3, 11),
      (13,  4, 13)
    $$,
    '9: 0 Infinity');


SELECT * FROM finish();
ROLLBACK;
