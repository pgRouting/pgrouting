
/*PGR-GNU*****************************************************************

Copyright (c) 2025  pgRouting developers
Mail: project@pgrouting.org

------
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 ********************************************************************PGR-GNU*/
BEGIN;

UPDATE edges SET cost = sign(cost), reverse_cost = sign(reverse_cost);
SELECT CASE WHEN NOT min_version('4.0.0') THEN plan(1) ELSE plan(6) END;


CREATE OR REPLACE FUNCTION edge_cases()
RETURNS SETOF TEXT AS
$BODY$
BEGIN

IF NOT min_version('4.0.0') THEN
  RETURN QUERY
  SELECT skip(1, 'pgr_sloanOrdering is new on 4.0.0');
  RETURN;
END IF;

-- 0 edge, 0 vertex test

PREPARE q1 AS
SELECT * FROM pgr_sloanOrdering('SELECT id, source, target, cost, reverse_cost FROM edges WHERE id > 18');

RETURN QUERY
SELECT throws_ok('q1', 'XX000', 'No edges found', 'Graph with 0 edge and 0 vertex -> Should throw');

-- 6 -> 6 (1 vertex test)

PREPARE q2 AS
SELECT * FROM pgr_sloanOrdering('SELECT id, source, source AS target, cost, reverse_cost FROM edges WHERE id = 2');

RETURN QUERY
SELECT set_eq('q2',$VALUES (1, 6)$$, '4: Same node returned');

-- 3 -- 7 -- 3; 2 vertices test (connected)

PREPARE q3 AS
SELECT * FROM pgr_sloanOrdering('SELECT id, source, target, cost, reverse_cost FROM edges WHERE id = 7');

RETURN QUERY
SELECT set_eq('q3',$VALUES (1,3), (2,7)$$, '3 -- 7 -- 3; Does not matter if 7 comes first or 3');


PERFORM todo_start('Its the same graph but giving different results');

-- 7 -- 3 -- 7; 2 vertices test (connected)

PREPARE q4 AS
SELECT * FROM pgr_sloanOrdering('SELECT id, target AS source, source AS target, cost, reverse_cost FROM edges WHERE id = 7');

RETURN QUERY
SELECT set_eq('q4',$VALUES (1,3), (2,7)$$, '7 -- 3 -- 7; Does not matter if 7 comes first or 3');

PERFORM todo_end();


PERFORM todo_start('Graph is disconnected, check if algo works for disconnected graphs');

-- 3 -- 3; 7 -- 7; 2 vertices test (isolated)

PREPARE q5 AS
SELECT * FROM pgr_sloanOrdering('SELECT id, source, source AS target, cost, reverse_cost FROM edges WHERE id = 7
UNION
SELECT id, target AS source, target, cost, reverse_cost FROM edges WHERE id = 7');

RETURN QUERY
SELECT set_eq('q5',$VALUES (1, 3), (2, 7)$$, 'Should have both vertices');
PERFORM todo_end();

-- 3 vertices test (connected)

PREPARE q6 AS
SELECT *
FROM pgr_sloanOrdering('SELECT id, source, target, cost, reverse_cost FROM edges WHERE id <= 2');

RETURN QUERY
SELECT set_eq('q6',$VALUES (6, 1), (7, 3), (4, 6)$$, 'Ordering of three connected vertices');

END;
$BODY$
LANGUAGE plpgsql;

SELECT edge_cases();


SELECT * FROM finish();
ROLLBACK;
