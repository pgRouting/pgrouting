BEGIN;

UPDATE edge_table SET cost = sign(cost), reverse_cost = sign(reverse_cost);
SELECT CASE WHEN min_version('3.4.0') THEN plan(32) ELSE plan(2) END;

PREPARE edges AS
SELECT id FROM edge_table;

SELECT isnt_empty('edges', 'Should be not empty to tests be meaningful');


CREATE OR REPLACE FUNCTION no_crash()
RETURNS SETOF TEXT AS
$BODY$
DECLARE
params TEXT[];
subs TEXT[];
BEGIN
  IF NOT min_version('3.4.0') THEN
    RETURN QUERY SELECT skip(1, 'Function added on 3.4.0');
    RETURN;
  END IF;

  PREPARE vert AS
  SELECT id, in_edges, out_edges
  FROM pgr_extractVertices('SELECT id, the_geom AS geom FROM edge_table');

  RETURN QUERY SELECT isnt_empty('vert', 'Should be not empty to tests be meaningful');

  params = ARRAY[
  '$$SELECT * FROM edge_table$$',
  '$$SELECT * FROM pgr_extractVertices($q$ SELECT id, the_geom AS geom FROM edge_table $q$) $$'
  ]::TEXT[];

  subs = ARRAY[
  'NULL',
  'NULL'
  ]::TEXT[];

  RETURN query SELECT * FROM no_crash_test('pgr_degree', params, subs);

  params[1] := '$$edges$$';
  RETURN query SELECT * FROM no_crash_test('pgr_degree', params, subs);

  params[2] := '$$vert$$';
  RETURN query SELECT * FROM no_crash_test('pgr_degree', params, subs);

  params[2] := '$$SELECT id, in_edges FROM pgr_extractVertices($q$ SELECT id, the_geom AS geom FROM edge_table $q$) $$';
  RETURN query SELECT * FROM no_crash_test('pgr_degree', params, subs);

  params[2] := '$$SELECT id, out_edges FROM pgr_extractVertices($q$ SELECT id, the_geom AS geom FROM edge_table $q$) $$';
  RETURN query SELECT * FROM no_crash_test('pgr_degree', params, subs);

END
$BODY$
LANGUAGE plpgsql VOLATILE;


SELECT * FROM no_crash();

ROLLBACK;
