
/*PGR-GNU*****************************************************************

Copyright (c) 2018  pgRouting developers
Mail: project@pgrouting.org

------
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 ********************************************************************PGR-GNU*/
BEGIN;

SET client_min_messages TO WARNING;
SELECT plan(30);

UPDATE edges SET cost = sign(cost) + 0.001 * id * id, reverse_cost = sign(reverse_cost) + 0.001 * id * id;

--
PREPARE query_1 AS
SELECT * FROM pgr_extractVertices(
    'SELECT source
    FROM edges'
);

PREPARE query_2 AS
SELECT *
FROM pgr_extractVertices(
    'SELECT target
     FROM edges'
);

SELECT throws_ok('query_1', 'P0001', 'Missing column', 'Incomlete data -> throws');
SELECT throws_ok('query_2', 'P0001', 'Missing column', 'Incomlete data -> throws');

--
PREPARE query_3 AS
SELECT *
FROM pgr_extractVertices(
    'SELECT ST_StartPoint(geom) AS startpoint
     FROM edges'
);

PREPARE query_4 AS
SELECT *
FROM pgr_extractVertices(
    'SELECT ST_EndPoint(geom) AS endpoint
     FROM edges'
);

SELECT throws_ok('query_3', 'P0001', 'Missing column', 'Incomlete data -> throws');
SELECT throws_ok('query_4', 'P0001', 'Missing column', 'Incomlete data -> throws');

--

PREPARE query_5 AS
SELECT * FROM pgr_extractVertices(
    'SELECT source, geom
    FROM edges'
);

PREPARE query_6 AS
SELECT *
FROM pgr_extractVertices(
    'SELECT target, geom
     FROM edges'
);

SELECT lives_ok('query_5', 'geom column makes data complete');
SELECT lives_ok('query_6', 'geom column makes data complete');

--
PREPARE query_7 AS
SELECT *
FROM pgr_extractVertices(
    'SELECT ST_StartPoint(geom) AS startpoint, geom
     FROM edges'
);

PREPARE query_8 AS
SELECT *
FROM pgr_extractVertices(
    'SELECT ST_EndPoint(geom) AS endpoint, geom
     FROM edges'
);

SELECT lives_ok('query_7', 'geom column makes data complete');
SELECT lives_ok('query_8', 'geom column makes data complete');

--

SELECT set_eq(
    $$SELECT count(*) FROM pgr_extractVertices( 'SELECT geom FROM edges')$$,
    $$VALUES (17)$$,
    '17: Number of vertices extracted');
SELECT set_eq(
    $$SELECT count(*) FROM pgr_extractVertices( 'SELECT ST_StartPoint(geom) AS startpoint, ST_EndPoint(geom) AS endpoint FROM edges')$$,
    $$VALUES (17)$$,
    '17: Number of vertices extracted');
SELECT set_eq(
    $$SELECT count(*) FROM pgr_extractVertices( 'SELECT source, target FROM edges')$$,
    $$VALUES (17)$$,
    '17: Number of vertices extracted');

SELECT set_eq(
    $$SELECT count(*) FROM pgr_extractVertices( 'SELECT id, geom FROM edges')$$,
    $$VALUES (17)$$,
    '17: Number of vertices extracted');
SELECT set_eq(
    $$SELECT count(*) FROM pgr_extractVertices( 'SELECT id, ST_StartPoint(geom) AS startpoint, ST_EndPoint(geom) AS endpoint FROM edges')$$,
    $$VALUES (17)$$,
    '17: Number of vertices extracted');
SELECT set_eq(
    $$SELECT count(*) FROM pgr_extractVertices( 'SELECT id, source, target FROM edges')$$,
    $$VALUES (17)$$,
    '17: Number of vertices extracted');

--
SELECT set_eq(
    $$
    SELECT x, y, geom
    FROM pgr_extractVertices($g$SELECT geom AS geom FROM edges$g$)
    $$,
    $$SELECT x, y, geom FROM vertices$$);

SELECT set_eq(
    $$
    SELECT unnest(out_edges), x, y, geom
    FROM pgr_extractVertices($g$SELECT id, geom AS geom FROM edges$g$)
    $$,
    $$SELECT unnest(out_edges), x, y, geom FROM vertices$$);

SELECT set_eq(
    $$
    SELECT unnest(in_edges), x, y, geom
    FROM pgr_extractVertices($g$SELECT id, geom AS geom FROM edges$g$)
    $$,
    $$SELECT unnest(in_edges), x, y, geom FROM vertices$$);

--
SELECT set_eq(
    $$
    SELECT x, y, geom
    FROM pgr_extractVertices($g$SELECT  ST_StartPoint(geom) AS startpoint, ST_EndPoint(geom) AS endpoint FROM edges$g$)
    $$,
    $$SELECT x, y, geom FROM vertices$$);

SELECT set_eq(
    $$
    SELECT unnest(out_edges), x, y, geom
    FROM pgr_extractVertices($g$SELECT id,  ST_StartPoint(geom) AS startpoint, ST_EndPoint(geom) AS endpoint FROM edges$g$)
    $$,
    $$SELECT unnest(out_edges), x, y, geom FROM vertices$$);

SELECT set_eq(
    $$
    SELECT unnest(in_edges), x, y, geom
    FROM pgr_extractVertices($g$SELECT id,  ST_StartPoint(geom) AS startpoint, ST_EndPoint(geom) AS endpoint FROM edges$g$)
    $$,
    $$SELECT unnest(in_edges), x, y, geom FROM vertices$$);


--
SELECT set_eq(
    $$
    SELECT id
    FROM pgr_extractVertices($g$SELECT  source, target FROM edges$g$)
    $$,
    $$SELECT id FROM vertices$$);

SELECT set_eq(
    $$
    SELECT id, unnest(out_edges)
    FROM pgr_extractVertices($g$SELECT id, source, target FROM edges$g$)
    $$,
    $$SELECT id, unnest(out_edges) FROM vertices$$);

SELECT set_eq(
    $$
    SELECT id, unnest(in_edges)
    FROM pgr_extractVertices($g$SELECT id, source, target FROM edges$g$)
    $$,
    $$SELECT id, unnest(in_edges) FROM vertices$$);

SELECT CASE WHEN NOT min_version('3.3.2') THEN skip(7, 'issue fixed on 3.3.2') ELSE
collect_tap(
  lives_ok(
    $$SELECT count(*) FROM pgr_extractVertices( 'SELECT id::INTEGER, source, target FROM edges')$$,
    'id used with integer'),
  lives_ok(
    $$SELECT count(*) FROM pgr_extractVertices( 'SELECT id, source::INTEGER, target FROM edges')$$,
    'source used with integer'),
  lives_ok(
    $$SELECT count(*) FROM pgr_extractVertices( 'SELECT id, source, target::INTEGER FROM edges')$$,
    'target used with integer'),
  lives_ok(
    $$SELECT count(*) FROM pgr_extractVertices( 'SELECT id, source::INTEGER, target::INTEGER FROM edges')$$,
    'source & target used with integer'),
  lives_ok(
    $$SELECT count(*) FROM pgr_extractVertices( 'SELECT source::INTEGER, target FROM edges')$$,
    'source used with integer, no id'),
  lives_ok(
    $$SELECT count(*) FROM pgr_extractVertices( 'SELECT source, target::INTEGER FROM edges')$$,
    'target used with integer, no id'),
  lives_ok(
    $$SELECT count(*) FROM pgr_extractVertices( 'SELECT source::INTEGER, target::INTEGER FROM edges')$$,
    'source & target used with integer, no id'))
END;

SELECT * FROM finish();
ROLLBACK;
