
/*PGR-GNU*****************************************************************

Copyright (c) 2018  pgRouting developers
Mail: project@pgrouting.org

------
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 ********************************************************************PGR-GNU*/
BEGIN;

SET client_min_messages TO WARNING;
UPDATE edges SET cost = sign(cost), reverse_cost = sign(reverse_cost);
SELECT plan(54);

PREPARE edges AS
SELECT geom FROM edges;

PREPARE edges1 AS
SELECT id, geom FROM edges;

PREPARE edges2 AS
SELECT ST_startPoint(geom) AS startpoint, ST_startPoint(geom) AS endpoint FROM edges;

PREPARE edges3 AS
SELECT id, ST_startPoint(geom) AS startpoint, ST_startPoint(geom) AS endpoint FROM edges;

PREPARE edges4 AS
SELECT source, target FROM edges;

PREPARE edges5 AS
SELECT id, source, target FROM edges;

SELECT isnt_empty('edges', 'Should be not empty to tests be meaningful');
SELECT isnt_empty('edges1', 'Should be not empty to tests be meaningful');
SELECT isnt_empty('edges2', 'Should be not empty to tests be meaningful');
SELECT isnt_empty('edges3', 'Should be not empty to tests be meaningful');
SELECT isnt_empty('edges4', 'Should be not empty to tests be meaningful');
SELECT isnt_empty('edges5', 'Should be not empty to tests be meaningful');


CREATE OR REPLACE FUNCTION test_function()
RETURNS SETOF TEXT AS
$BODY$
DECLARE
params TEXT[];
subs TEXT[];
BEGIN
    -- with geometry
    params = ARRAY[
    '$$SELECT geom FROM edges$$'
    ]::TEXT[];

    subs = ARRAY[
    'NULL'
    ]::TEXT[];

    RETURN query SELECT * FROM no_crash_test('pgr_extractVertices', params, subs);

    params[1] := '$$edges$$';
    RETURN query SELECT * FROM no_crash_test('pgr_extractVertices', params, subs);

    -- with geometry and id
    params = ARRAY[
    '$$SELECT id, geom FROM edges$$'
    ]::TEXT[];

    RETURN query SELECT * FROM no_crash_test('pgr_extractVertices', params, subs);

    params[1] := '$$edges1$$';
    RETURN query SELECT * FROM no_crash_test('pgr_extractVertices', params, subs);

    -- with startpoint & endpoint
    params = ARRAY[
    '$$SELECT ST_startPoint(geom) AS startpoint, ST_startPoint(geom) AS endpoint FROM edges$$'
    ]::TEXT[];

    RETURN query SELECT * FROM no_crash_test('pgr_extractVertices', params, subs);

    params[1] := '$$edges2$$';
    RETURN query SELECT * FROM no_crash_test('pgr_extractVertices', params, subs);

    -- with startpoint & endpoint and id
    params = ARRAY[
    '$$SELECT id, ST_startPoint(geom) AS startpoint, ST_startPoint(geom) AS endpoint FROM edges$$'
    ]::TEXT[];

    RETURN query SELECT * FROM no_crash_test('pgr_extractVertices', params, subs);

    params[1] := '$$edges3$$';
    RETURN query SELECT * FROM no_crash_test('pgr_extractVertices', params, subs);

    -- with source & target
    params = ARRAY[
    '$$SELECT source, target FROM edges$$'
    ]::TEXT[];

    RETURN query SELECT * FROM no_crash_test('pgr_extractVertices', params, subs);

    params[1] := '$$edges3$$';
    RETURN query SELECT * FROM no_crash_test('pgr_extractVertices', params, subs);

    -- with source & target & id
    params = ARRAY[
    '$$SELECT id, source, target FROM edges$$'
    ]::TEXT[];

    RETURN query SELECT * FROM no_crash_test('pgr_extractVertices', params, subs);

    params[1] := '$$edges3$$';
    RETURN query SELECT * FROM no_crash_test('pgr_extractVertices', params, subs);

END
$BODY$
LANGUAGE plpgsql VOLATILE;




SELECT * FROM test_function();

SELECT finish();
ROLLBACK;
