/*PGR-GNU*****************************************************************

Copyright (c) 2018  pgRouting developers
Mail: project@pgrouting.org

------
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 ********************************************************************PGR-GNU*/
BEGIN;

UPDATE edges SET cost = sign(cost), reverse_cost = sign(reverse_cost);
SELECT CASE WHEN min_version('3.8.0') THEN plan(16) ELSE plan(1) END;

CREATE OR REPLACE FUNCTION edge_cases()
RETURNS SETOF TEXT AS
$BODY$
BEGIN

  IF NOT min_version('3.8.0') THEN
    RETURN QUERY SELECT skip(1, 'pgr_findcloseedges testing only valid signatures from 4.0.0');
    RETURN;
  END IF;

  -- One point
  PREPARE edges AS
  SELECT id, geom  FROM edges;
  PREPARE edges1 AS
  SELECT id FROM edges;
  PREPARE edges2 AS
  SELECT geom FROM edges;

  PREPARE query_1 AS
  SELECT * FROM pgr_findCloseEdges('edges', (SELECT geom FROM pointsOfInterest WHERE pid = 5), 0.5);
  PREPARE query_2 AS
  SELECT * FROM pgr_findCloseEdges('edges', (SELECT geom FROM pointsOfInterest WHERE pid = 5), 0.5, 2);
  PREPARE query_3 AS
  SELECT * FROM pgr_findCloseEdges('edges', (SELECT geom FROM pointsOfInterest WHERE pid = 5), 0.5, 2, dryrun => true);

  PREPARE err1 AS
  SELECT * FROM pgr_findCloseEdges('edges1',(SELECT geom FROM pointsOfInterest WHERE pid = 5), 0.5);
  PREPARE err2 AS
  SELECT * FROM pgr_findCloseEdges('edges2',(SELECT geom FROM pointsOfInterest WHERE pid = 5), 0.5);

  RETURN QUERY SELECT lives_ok('query_1', 'With defaults');
  RETURN QUERY SELECT lives_ok('query_2', 'two rows');
  RETURN QUERY SELECT lives_ok('query_3', 'dryrun');
  RETURN QUERY SELECT is_empty('query_3', 'dryrun results empty');

  RETURN QUERY SELECT column_missing('err1', 'geom');
  RETURN QUERY SELECT column_missing('err2', 'id');

  RETURN QUERY SELECT wrong_relation($$SELECT * FROM pgr_findCloseEdges(
    'SELECT id, geom FROM foo', (SELECT geom FROM pointsOfInterest WHERE pid = 5), 0.5)$$, 'foo');
  RETURN QUERY SELECT throws_ok($$SELECT * FROM pgr_findCloseEdges(
    'SELECT id, geom FROM edges', (SELECT geom FROM bar WHERE pid = 5), 0.5)$$,
    '42P01', 'relation "bar" does not exist');

  -- Many points
  PREPARE query_4 AS
  SELECT * FROM pgr_findCloseEdges('edges', (SELECT array_agg(geom) FROM pointsOfInterest), 0.5);
  PREPARE query_5 AS
  SELECT * FROM pgr_findCloseEdges('edges', (SELECT array_agg(geom) FROM pointsOfInterest), 0.5, 2);
  PREPARE query_6 AS
  SELECT * FROM pgr_findCloseEdges('edges', (SELECT array_agg(geom) FROM pointsOfInterest), 0.5, 2, dryrun => true);

  PREPARE err3 AS
  SELECT * FROM pgr_findCloseEdges('edges1',(SELECT array_agg(geom) FROM pointsOfInterest), 0.5);
  PREPARE err4 AS
  SELECT * FROM pgr_findCloseEdges('edges2',(SELECT array_agg(geom) FROM pointsOfInterest), 0.5);

  RETURN QUERY SELECT lives_ok('query_4', 'With defaults');
  RETURN QUERY SELECT lives_ok('query_5', 'two rows');
  RETURN QUERY SELECT lives_ok('query_6', 'dryrun');
  RETURN QUERY SELECT is_empty('query_6', 'dryrun results empty');

  RETURN QUERY SELECT column_missing('err3', 'geom');
  RETURN QUERY SELECT column_missing('err4', 'id');


  RETURN QUERY SELECT wrong_relation($$SELECT * FROM pgr_findCloseEdges(
    'SELECT id, geom FROM foo', (SELECT array_agg(geom) FROM pointsOfInterest), 0.5)$$, 'foo');
  RETURN QUERY SELECT throws_ok($$SELECT * FROM pgr_findCloseEdges(
    'SELECT id, geom FROM edges', (SELECT array_agg(geom) FROM bar), 0.5)$$,
    '42P01', 'relation "bar" does not exist');

END;
$BODY$
LANGUAGE plpgsql;

SELECT edge_cases();

SELECT finish();
ROLLBACK;
