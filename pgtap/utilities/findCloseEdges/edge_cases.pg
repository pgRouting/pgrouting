
/*PGR-GNU*****************************************************************

Copyright (c) 2018  pgRouting developers
Mail: project@pgrouting.org

------
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 ********************************************************************PGR-GNU*/
BEGIN;

UPDATE edges SET cost = sign(cost), reverse_cost = sign(reverse_cost);
SELECT CASE WHEN min_version('3.8.0') THEN plan(33) WHEN min_version('3.4.0') THEN plan(34) ELSE plan(1) END;
SET client_min_messages TO 'WARNING';


CREATE OR REPLACE FUNCTION edge_cases()
RETURNS SETOF TEXT AS
$BODY$
DECLARE
  the_q TEXT;
BEGIN
  IF NOT min_version('3.4.0') THEN
    RETURN QUERY SELECT skip(1, 'Function added on 3.4.0');
    RETURN;
  END IF;

  -- One point
  PREPARE edges AS
  SELECT id, geom  FROM edges;
  PREPARE edges1 AS
  SELECT id FROM edges;
  PREPARE edges2 AS
  SELECT geom FROM edges;

  PREPARE query_1 AS
  SELECT * FROM pgr_findCloseEdges('edges', (SELECT geom FROM pointsOfInterest WHERE pid = 5), 0.5);
  PREPARE query_2 AS
  SELECT * FROM pgr_findCloseEdges('edges', (SELECT geom FROM pointsOfInterest WHERE pid = 5), 0.5, 2);
  PREPARE query_3 AS
  SELECT * FROM pgr_findCloseEdges('edges', (SELECT geom FROM pointsOfInterest WHERE pid = 5), 0.5, 2, dryrun => true);

  PREPARE err1 AS
  SELECT * FROM pgr_findCloseEdges('edges1',(SELECT geom FROM pointsOfInterest WHERE pid = 5), 0.5);
  PREPARE err2 AS
  SELECT * FROM pgr_findCloseEdges('edges2',(SELECT geom FROM pointsOfInterest WHERE pid = 5), 0.5);

  RETURN QUERY SELECT lives_ok('query_1', 'With defaults');
  RETURN QUERY SELECT lives_ok('query_2', 'two rows');
  RETURN QUERY SELECT lives_ok('query_3', 'dryrun');
  RETURN QUERY SELECT is_empty('query_3', 'dryrun results empty');

  RETURN QUERY SELECT column_missing('err1', 'geom');
  RETURN QUERY SELECT column_missing('err2', 'id');

  RETURN QUERY SELECT wrong_relation($$SELECT * FROM pgr_findCloseEdges(
    'SELECT id, geom FROM foo', (SELECT geom FROM pointsOfInterest WHERE pid = 5), 0.5)$$, 'foo');
  RETURN QUERY SELECT throws_ok($$SELECT * FROM pgr_findCloseEdges(
    'SELECT id, geom FROM edges', (SELECT geom FROM bar WHERE pid = 5), 0.5)$$,
    '42P01', 'relation "bar" does not exist');

  -- Many points
  PREPARE query_4 AS
  SELECT * FROM pgr_findCloseEdges('edges', (SELECT array_agg(geom) FROM pointsOfInterest), 0.5);
  PREPARE query_5 AS
  SELECT * FROM pgr_findCloseEdges('edges', (SELECT array_agg(geom) FROM pointsOfInterest), 0.5, 2);
  PREPARE query_6 AS
  SELECT * FROM pgr_findCloseEdges('edges', (SELECT array_agg(geom) FROM pointsOfInterest), 0.5, 2, dryrun => true);

  PREPARE err3 AS
  SELECT * FROM pgr_findCloseEdges('edges1',(SELECT array_agg(geom) FROM pointsOfInterest), 0.5);
  PREPARE err4 AS
  SELECT * FROM pgr_findCloseEdges('edges2',(SELECT array_agg(geom) FROM pointsOfInterest), 0.5);

  RETURN QUERY SELECT lives_ok('query_4', 'With defaults');
  RETURN QUERY SELECT lives_ok('query_5', 'two rows');
  RETURN QUERY SELECT lives_ok('query_6', 'dryrun');
  RETURN QUERY SELECT is_empty('query_6', 'dryrun results empty');

  RETURN QUERY SELECT column_missing('err3', 'geom');
  RETURN QUERY SELECT column_missing('err4', 'id');


  RETURN QUERY SELECT wrong_relation($$SELECT * FROM pgr_findCloseEdges(
    'SELECT id, geom FROM foo', (SELECT array_agg(geom) FROM pointsOfInterest), 0.5)$$, 'foo');
  RETURN QUERY SELECT throws_ok($$SELECT * FROM pgr_findCloseEdges(
    'SELECT id, geom FROM edges', (SELECT array_agg(geom) FROM bar), 0.5)$$,
    '42P01', 'relation "bar" does not exist');

  IF min_version('4.0.0') THEN
    RETURN QUERY SELECT skip(1, 'Signatures with partial flag is removed on 4.0.0');
    RETURN;
  END IF;

  -- Test with partial flag
  RETURN QUERY SELECT is_empty($$SELECT * FROM pgr_findCloseEdges(
      'SELECT id, geom FROM edges', (SELECT geom FROM pointsOfInterest WHERE pid = 5), 0.5, 1, true, true)$$, 'One geom: partial,dryrun = true,true');
  RETURN QUERY SELECT isnt_empty($$SELECT * FROM pgr_findCloseEdges(
      'SELECT id, geom FROM edges', (SELECT geom FROM pointsOfInterest WHERE pid = 5), 0.5, 1, true, false)$$, 'One geom: partial,dryrun = true,false');
  RETURN QUERY SELECT is_empty($$SELECT * FROM pgr_findCloseEdges(
      'SELECT id, geom FROM edges', (SELECT geom FROM pointsOfInterest WHERE pid = 5), 0.5, 1, false, true)$$, 'One geom: partial,dryrun = false,true');
  RETURN QUERY SELECT isnt_empty($$SELECT * FROM pgr_findCloseEdges(
      'SELECT id, geom FROM edges', (SELECT geom FROM pointsOfInterest WHERE pid = 5), 0.5, 1, false, false)$$, 'One geom: partial,dryrun = false,false');

  RETURN QUERY SELECT is_empty($$SELECT * FROM pgr_findCloseEdges(
      'SELECT id, geom FROM edges', (SELECT array_agg(geom) FROM pointsOfInterest), 0.5, 1, true, true)$$, 'Many geom: partial,dryrun = true,true');
  RETURN QUERY SELECT isnt_empty($$SELECT * FROM pgr_findCloseEdges(
      'SELECT id, geom FROM edges', (SELECT array_agg(geom) FROM pointsOfInterest), 0.5, 1, true, false)$$, 'Many geom: partial,dryrun = true,false');
  RETURN QUERY SELECT is_empty($$SELECT * FROM pgr_findCloseEdges(
      'SELECT id, geom FROM edges', (SELECT array_agg(geom) FROM pointsOfInterest), 0.5, 1, false, true)$$, 'Many geom: partial,dryrun = false,true');
  RETURN QUERY SELECT isnt_empty($$SELECT * FROM pgr_findCloseEdges(
      'SELECT id, geom FROM edges', (SELECT array_agg(geom) FROM pointsOfInterest), 0.5, 1, false, false)$$, 'Many geom: partial,dryrun = false,false');

  RETURN QUERY SELECT
  CASE WHEN min_version('3.8.0') THEN
    collect_tap(
      throws_ok($$SELECT * FROM pgr_findCloseEdges(
          'SELECT id, geom FROM edges', (SELECT geom FROM pointsOfInterest WHERE pid = 5), 0.5, 1, partial => true) WHERE distance IS NOT NULL$$,
          '42883','function pgr_findcloseedges(unknown, geometry, numeric, integer, partial => boolean) does not exist', 'throws: One geom, with cap value, naming partial => true'),
      throws_ok($$SELECT * FROM pgr_findCloseEdges(
          'SELECT id, geom FROM edges', (SELECT geom FROM pointsOfInterest WHERE pid = 5), 0.5, partial => true) WHERE distance IS NOT NULL$$,
          '42883','function pgr_findcloseedges(unknown, geometry, numeric, partial => boolean) does not exist', 'throws: One geom, without cap value naming partial => true'),
      isnt_empty($$SELECT * FROM pgr_findCloseEdges(
          'SELECT id, geom FROM edges', (SELECT geom FROM pointsOfInterest WHERE pid = 5), 0.5, 1, true, false) WHERE distance IS NOT NULL$$, 'partial, One geom: isnt_empty distance'),
      isnt_empty($$SELECT * FROM pgr_findCloseEdges(
          'SELECT id, geom FROM edges', (SELECT geom FROM pointsOfInterest WHERE pid = 5), 0.5, 1, true, false) WHERE geom IS NOT NULL$$, 'partial, One geom: isnt_empty geom'),
      isnt_empty($$SELECT * FROM pgr_findCloseEdges(
          'SELECT id, geom FROM edges', (SELECT geom FROM pointsOfInterest WHERE pid = 5), 0.5, 1, true, false) WHERE edge IS NOT NULL$$, 'partial, One geom: isnt_empty edge'),

      throws_ok($$SELECT * FROM pgr_findCloseEdges(
          'SELECT id, geom FROM edges', (SELECT array_agg(geom) FROM pointsOfInterest), 0.5, 1, partial => true) WHERE distance IS NOT NULL$$,
          '42883','function pgr_findcloseedges(unknown, geometry[], numeric, integer, partial => boolean) does not exist', 'throws: Many geom, with cap value, naming partial => true'),
      throws_ok($$SELECT * FROM pgr_findCloseEdges(
          'SELECT id, geom FROM edges', (SELECT array_agg(geom) FROM pointsOfInterest), 0.5, partial => true) WHERE distance IS NOT NULL$$,
          '42883','function pgr_findcloseedges(unknown, geometry[], numeric, partial => boolean) does not exist', 'throws: Many geom, without cap value naming partial => true'),
      isnt_empty($$SELECT * FROM pgr_findCloseEdges(
          'SELECT id, geom FROM edges', (SELECT array_agg(geom) FROM pointsOfInterest), 0.5, 1, true, false) WHERE distance IS NOT NULL$$, 'partial, Many geom: isnt_empty distance'),
      isnt_empty($$SELECT * FROM pgr_findCloseEdges(
          'SELECT id, geom FROM edges', (SELECT array_agg(geom) FROM pointsOfInterest), 0.5, 1, true, false) WHERE edge IS NOT NULL$$, 'partial, Many geom: isnt_empty edge')
    )

  ELSE
    collect_tap(
      lives_ok($$SELECT * FROM pgr_findCloseEdges(
          'SELECT id, geom FROM edges', (SELECT geom FROM pointsOfInterest WHERE pid = 5), 0.5, 1, partial => true) WHERE distance IS NOT NULL$$, 'One geom, with cap value, naming partial => true'),
      lives_ok($$SELECT * FROM pgr_findCloseEdges(
          'SELECT id, geom FROM edges', (SELECT geom FROM pointsOfInterest WHERE pid = 5), 0.5, partial => true) WHERE distance IS NOT NULL$$, 'One geom, without cap value, naming partial => true'),
      is_empty($$SELECT * FROM pgr_findCloseEdges(
          'SELECT id, geom FROM edges', (SELECT geom FROM pointsOfInterest WHERE pid = 5), 0.5, 1, true, false) WHERE distance IS NOT NULL$$, 'partial, One geom: is_empty distance'),
      is_empty($$SELECT * FROM pgr_findCloseEdges(
          'SELECT id, geom FROM edges', (SELECT geom FROM pointsOfInterest WHERE pid = 5), 0.5, 1, true, false) WHERE geom IS NOT NULL$$, 'partial, One geom: is_empty geom'),
      is_empty($$SELECT * FROM pgr_findCloseEdges(
          'SELECT id, geom FROM edges', (SELECT geom FROM pointsOfInterest WHERE pid = 5), 0.5, 1, true, false) WHERE edge IS NOT NULL$$, 'partial, One geom: is_empty edge'),

      lives_ok($$SELECT * FROM pgr_findCloseEdges(
          'SELECT id, geom FROM edges', (SELECT array_agg(geom) FROM pointsOfInterest), 0.5, 1, partial => true) WHERE distance IS NOT NULL$$, 'Many geom, with cap value, naming partial => true'),
      lives_ok($$SELECT * FROM pgr_findCloseEdges(
          'SELECT id, geom FROM edges', (SELECT array_agg(geom) FROM pointsOfInterest), 0.5, partial => true) WHERE distance IS NOT NULL$$, 'Many geom, without cap value, naming partial => true'),
      isnt_empty($$SELECT * FROM pgr_findCloseEdges(
          'SELECT id, geom FROM edges', (SELECT array_agg(geom) FROM pointsOfInterest), 0.5, 1, true, false) WHERE distance IS NOT NULL$$, 'partial, Many geom: isnt_empty distance'),
      isnt_empty($$SELECT * FROM pgr_findCloseEdges(
          'SELECT id, geom FROM edges', (SELECT array_agg(geom) FROM pointsOfInterest), 0.5, 1, true, false) WHERE geom IS NOT NULL$$, 'partial, Many geom: isnt_empty geom'),
      is_empty($$SELECT * FROM pgr_findCloseEdges(
          'SELECT id, geom FROM edges', (SELECT array_agg(geom) FROM pointsOfInterest), 0.5, 1, true, false) WHERE edge IS NOT NULL$$, 'partial, Many geom: is_empty edge')
    )
  END;

END;
$BODY$
LANGUAGE plpgsql;

SELECT edge_cases();

SELECT finish();
ROLLBACK;
