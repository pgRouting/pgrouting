
/*PGR-GNU*****************************************************************

Copyright (c) 2018  pgRouting developers
Mail: project@pgrouting.org

------
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 ********************************************************************PGR-GNU*/
BEGIN;

SELECT plan(13);

CREATE OR REPLACE FUNCTION types_check()
RETURNS SETOF TEXT AS
$BODY$
BEGIN

  RETURN QUERY SELECT has_function('pgr_edwardmoore');

  RETURN QUERY SELECT has_function('pgr_edwardmoore', ARRAY['text','bigint','bigint','boolean']);
  RETURN QUERY SELECT has_function('pgr_edwardmoore', ARRAY['text','bigint','anyarray','boolean']);
  RETURN QUERY SELECT has_function('pgr_edwardmoore', ARRAY['text','anyarray','bigint','boolean']);
  RETURN QUERY SELECT has_function('pgr_edwardmoore', ARRAY['text','anyarray','anyarray','boolean']);

  RETURN QUERY SELECT function_returns('pgr_edwardmoore', ARRAY['text','bigint','bigint','boolean'], 'setof record');
  RETURN QUERY SELECT function_returns('pgr_edwardmoore', ARRAY['text','bigint','anyarray','boolean'], 'setof record');
  RETURN QUERY SELECT function_returns('pgr_edwardmoore', ARRAY['text','anyarray','bigint','boolean'], 'setof record');
  RETURN QUERY SELECT function_returns('pgr_edwardmoore', ARRAY['text','anyarray','anyarray','boolean'], 'setof record');

  RETURN QUERY
  SELECT CASE
  WHEN min_version('3.2.0') THEN
    collect_tap(
      has_function('pgr_edwardmoore', ARRAY['text','text','boolean']),
      function_returns('pgr_edwardmoore', ARRAY['text','text','boolean'], 'setof record')
    )
  ELSE
    skip(2, 'Combinations signature added on version 3.2.0')
  END;

  RETURN QUERY
  SELECT CASE
  WHEN min_version('3.2.0') THEN
    collect_tap(
      set_eq(
        $$SELECT  proargnames from pg_proc where proname = 'pgr_edwardmoore'$$,
        $$VALUES
        ('{"","","","directed","seq","path_seq","node","edge","cost","agg_cost"}'::TEXT[]),
        ('{"","","","directed","seq","path_seq","start_vid","node","edge","cost","agg_cost"}'::TEXT[]),
        ('{"","","","directed","seq","path_seq","end_vid","node","edge","cost","agg_cost"}'::TEXT[]),
        ('{"","","","directed","seq","path_seq","start_vid","end_vid","node","edge","cost","agg_cost"}'::TEXT[]),
        ('{"","",directed,seq,path_seq,start_vid,end_vid,node,edge,cost,agg_cost}'::TEXT[])
        $$
      ),

      set_has(
        $$SELECT  proallargtypes from pg_proc where proname = 'pgr_edwardmoore'$$,
        $$VALUES
        ('{25,20,20,16,23,23,20,20,701,701}'::OID[]),
        ('{25,20,2277,16,23,23,20,20,20,701,701}'::OID[]),
        ('{25,2277,20,16,23,23,20,20,20,701,701}'::OID[]),
        ('{25,2277,2277,16,23,23,20,20,20,20,701,701}'::OID[]),
        ('{25,25,16,23,23,20,20,20,20,701,701}'::OID[])
        $$
      )
    )
  ELSE
    collect_tap(
      set_eq(
        $$SELECT  proargnames from pg_proc where proname = 'pgr_edwardmoore'$$,
        $$VALUES
        ('{"","","","directed","seq","path_seq","node","edge","cost","agg_cost"}'::TEXT[]),
        ('{"","","","directed","seq","path_seq","start_vid","node","edge","cost","agg_cost"}'::TEXT[]),
        ('{"","","","directed","seq","path_seq","end_vid","node","edge","cost","agg_cost"}'::TEXT[]),
        ('{"","","","directed","seq","path_seq","start_vid","end_vid","node","edge","cost","agg_cost"}'::TEXT[])
        $$
      ),

      set_eq(
        $$SELECT  proallargtypes from pg_proc where proname = 'pgr_edwardmoore'$$,
        $$VALUES
        ('{25,20,20,16,23,23,20,20,701,701}'::OID[]),
        ('{25,20,2277,16,23,23,20,20,20,701,701}'::OID[]),
        ('{25,2277,20,16,23,23,20,20,20,701,701}'::OID[]),
        ('{25,2277,2277,16,23,23,20,20,20,20,701,701}'::OID[])
        $$
      )
    )
  END;

END;
$BODY$
LANGUAGE plpgsql;

SELECT types_check();


SELECT finish();
ROLLBACK;
