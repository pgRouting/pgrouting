# SOME DESCRIPTIVE TITLE.
# Copyright (C) pgRouting Contributors - Version v3.3.4
# This file is distributed under the same license as the pgRouting package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pgRouting v3.3.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-06 14:22-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

msgid ""
"**Supported versions:** `Latest "
"<https://docs.pgrouting.org/latest/en/pgr_analyzeOneWay.html>`__ (`3.3 "
"<https://docs.pgrouting.org/3.3/en/pgr_analyzeOneWay.html>`__) `3.2 "
"<https://docs.pgrouting.org/3.2/en/pgr_analyzeOneWay.html>`__ `3.1 "
"<https://docs.pgrouting.org/3.1/en/pgr_analyzeOneWay.html>`__ `3.0 "
"<https://docs.pgrouting.org/3.0/en/pgr_analyzeOneWay.html>`__"
msgstr ""

msgid ""
"**Unsupported versions:** `2.6 "
"<https://docs.pgrouting.org/2.6/en/pgr_analyzeOneWay.html>`__ `2.5 "
"<https://docs.pgrouting.org/2.5/en/pgr_analyzeOneWay.html>`__ `2.4 "
"<https://docs.pgrouting.org/2.4/en/pgr_analyzeOneWay.html>`__ `2.3 "
"<https://docs.pgrouting.org/2.3/en/src/topology/doc/pgr_analyzeOneWay.html>`__"
" `2.2 "
"<https://docs.pgrouting.org/2.2/en/src/topology/doc/pgr_analyzeOneWay.html>`__"
" `2.1 "
"<https://docs.pgrouting.org/2.1/en/src/common/doc/functions/analyze_oneway.html>`__"
" `2.0 "
"<https://docs.pgrouting.org/2.0/en/src/common/doc/functions/analyze_oneway.html>`__"
msgstr ""

msgid "pgr_analyzeOneWay"
msgstr ""

msgid ""
"``pgr_analyzeOneWay`` â€” Analyzes oneway Sstreets and identifies flipped "
"segments."
msgstr ""

msgid ""
"This function analyzes oneway streets in a graph and identifies any "
"flipped segments."
msgstr ""

msgid "Availability"
msgstr ""

msgid "Version 2.0.0"
msgstr ""

msgid "**Official** function"
msgstr ""

msgid "Description"
msgstr ""

msgid ""
"The analyses of one way segments is pretty simple but can be a powerful "
"tools to identifying some the potential problems created by setting the "
"direction of a segment the wrong way. A node is a `source` if it has "
"edges the exit from that node and no edges enter that node. Conversely, a"
" node is a `sink` if all edges enter the node but none exit that node. "
"For a `source` type node it is logically impossible to exist because no "
"vehicle can exit the node if no vehicle and enter the node. Likewise, if "
"you had a `sink` node you would have an infinite number of vehicle piling"
" up on this node because you can enter it but not leave it."
msgstr ""

msgid ""
"So why do we care if the are not feasible? Well if the direction of an "
"edge was reversed by mistake we could generate exactly these conditions. "
"Think about a divided highway and on the north bound lane one segment got"
" entered wrong or maybe a sequence of multiple segments got entered wrong"
" or maybe this happened on a round-about. The result would be potentially"
" a `source` and/or a `sink` node."
msgstr ""

msgid ""
"So by counting the number of edges entering and exiting each node we can "
"identify both `source` and `sink` nodes so that you can look at those "
"areas of your network to make repairs and/or report the problem back to "
"your data vendor."
msgstr ""

msgid "Prerequisites"
msgstr ""

msgid ""
"The  edge table to be analyzed must contain a source column and a target "
"column filled with id's of the vertices of the segments and the "
"corresponding vertices table <edge_table>_vertices_pgr that stores the "
"vertices information."
msgstr ""

msgid "Use :doc:`pgr_createVerticesTable` to create the vertices table."
msgstr ""

msgid ""
"Use :doc:`pgr_createTopology` to create the topology and the vertices "
"table."
msgstr ""

msgid "Signatures"
msgstr ""

msgid "\\ \\"
msgstr ""

msgid ""
"pgr_analyzeOneWay(**geom_table**, **s_in_rules**, **s_out_rules**, "
"**t_in_rules**, **t_out_rules**, [**options**])"
msgstr ""

msgid "**options:** ``[oneway, source, target, two_way_if_null]``"
msgstr ""

msgid "RETURNS ``TEXT``"
msgstr ""

msgid "Parameters"
msgstr ""

msgid "edge_table"
msgstr ""

msgid "``text`` Network table name. (may contain the schema name as well)"
msgstr ""

msgid "s_in_rules"
msgstr ""

msgid "``text[]`` source node **in** rules"
msgstr ""

msgid "s_out_rules"
msgstr ""

msgid "``text[]`` source node **out** rules"
msgstr ""

msgid "t_in_rules"
msgstr ""

msgid "``text[]`` target node **in** rules"
msgstr ""

msgid "t_out_rules"
msgstr ""

msgid "``text[]`` target node **out** rules"
msgstr ""

msgid "oneway"
msgstr ""

msgid ""
"``text`` oneway column name name of the network table. Default value is "
"``oneway``."
msgstr ""

msgid "source"
msgstr ""

msgid ""
"``text`` Source column name of the network table. Default value is "
"``source``."
msgstr ""

msgid "target"
msgstr ""

msgid ""
"``text``  Target column name of the network table.  Default value is "
"``target``."
msgstr ""

msgid "two_way_if_null"
msgstr ""

msgid ""
"``boolean`` flag to treat oneway NULL values as bi-directional.  Default "
"value is ``true``."
msgstr ""

msgid ""
"It is strongly recommended to use the named notation. See "
":doc:`pgr_createVerticesTable` or :doc:`pgr_createTopology` for examples."
msgstr ""

msgid "The function returns:"
msgstr ""

msgid "``OK`` after the analysis has finished."
msgstr ""

msgid "Uses the vertices table: <edge_table>_vertices_pgr."
msgstr ""

msgid "Fills completely the ``ein`` and ``eout`` columns of the vertices table."
msgstr ""

msgid "``FAIL`` when the analysis was not completed due to an error."
msgstr ""

msgid "The vertices table is not found."
msgstr ""

msgid ""
"A required column of the Network table is not found or is not of the "
"appropriate type."
msgstr ""

msgid "The names of source , target or oneway are the same."
msgstr ""

msgid ""
"The rules are defined as an array of text strings that if match the "
"``oneway`` value would be counted as ``true`` for the source or target "
"**in** or **out** condition."
msgstr ""

msgid "The Vertices Table"
msgstr ""

msgid ""
"The vertices table can be created with :doc:`pgr_createVerticesTable` or "
":doc:`pgr_createTopology`"
msgstr ""

msgid "The structure of the vertices table is:"
msgstr ""

msgid "id"
msgstr ""

msgid "``bigint`` Identifier of the vertex."
msgstr ""

msgid "cnt"
msgstr ""

msgid ""
"``integer`` Number of vertices in the edge_table that reference this "
"vertex. See :doc:`pgr_analyzeGgraph <pgr_analyzeGraph>`."
msgstr ""

msgid "chk"
msgstr ""

msgid ""
"``integer``  Indicator that the vertex might have a problem. See "
":doc:`pgr_analyzeGraph <pgr_analyzeGraph>`."
msgstr ""

msgid "ein"
msgstr ""

msgid ""
"``integer`` Number of vertices in the edge_table that reference this "
"vertex as incoming."
msgstr ""

msgid "eout"
msgstr ""

msgid ""
"``integer`` Number of vertices in the edge_table that reference this "
"vertex as outgoing."
msgstr ""

msgid "the_geom"
msgstr ""

msgid "``geometry`` Point geometry of the vertex."
msgstr ""

msgid "Additional Examples"
msgstr ""

msgid "See Also"
msgstr ""

msgid ":doc:`topology-functions`"
msgstr ""

msgid ":doc:`pgr_analyzeGraph`"
msgstr ""

msgid ":doc:`pgr_createVerticesTable`"
msgstr ""

msgid ":doc:`sampledata`"
msgstr ""

msgid "Indices and tables"
msgstr ""

msgid ":ref:`genindex`"
msgstr ""

msgid ":ref:`search`"
msgstr ""

