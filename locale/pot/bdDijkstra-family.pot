# SOME DESCRIPTIVE TITLE.
# Copyright (C) pgRouting Contributors - Version v3.0.2
# This file is distributed under the same license as the pgRouting package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pgRouting v3.0.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-07-09 09:02-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../build/doc/bdDijkstra-family.rst:11
msgid "Bidirectional Dijkstra - Family of functions"
msgstr ""

#: ../../build/doc/bdDijkstra-family.rst:15
msgid ":doc:`pgr_bdDijkstra` - Bidirectional Dijkstra algorithm for the shortest paths."
msgstr ""

#: ../../build/doc/bdDijkstra-family.rst:16
msgid ":doc:`pgr_bdDijkstraCost` - Bidirectional Dijkstra to calculate the cost of the shortest paths"
msgstr ""

#: ../../build/doc/bdDijkstra-family.rst:17
msgid ":doc:`pgr_bdDijkstraCostMatrix` - Bidirectional Dijkstra algorithm  to create a matrix of costs of the shortest paths."
msgstr ""

#: ../../build/doc/bdDijkstra-family.rst:29
msgid "Previous versions of this page"
msgstr ""

#: ../../build/doc/bdDijkstra-family.rst:30
msgid "**Supported versions:** current(`3.0 <https://docs.pgrouting.org/3.0/en/bdDijkstra-family.html>`__) `2.6 <https://docs.pgrouting.org/2.6/en/bdDijkstra-family.html>`__"
msgstr ""

#: ../../build/doc/bdDijkstra-family.rst:34
msgid "**Unsupported versions:** `2.5 <https://docs.pgrouting.org/2.5/en/bdDijkstra-family.html>`__"
msgstr ""

#: ../../build/doc/bdDijkstra-family.rst:39
msgid "Synopsis"
msgstr ""

#: ../../build/doc/bdDijkstra-family.rst:41
msgid "Based on Dijkstra's algorithm, the bidirectional search finds a shortest path a starting vertex (``start_vid``) to an ending vertex (``end_vid``). It runs two simultaneous searches: one forward from the source, and one backward from the target, stopping when the two meet in the middle. This implementation can be used with a directed graph and an undirected graph."
msgstr ""

#: ../../build/doc/bdDijkstra-family.rst:48
msgid "Characteristics"
msgstr ""

#: ../../build/doc/bdDijkstra-family.rst:51
msgid "The main Characteristics are:"
msgstr ""

#: ../../build/doc/bdDijkstra-family.rst:55
msgid "Process is done only on edges with positive costs."
msgstr ""

#: ../../build/doc/bdDijkstra-family.rst:56
msgid "Values are returned when there is a path."
msgstr ""

#: ../../build/doc/bdDijkstra-family.rst:58
msgid "When the starting vertex and ending vertex are the same, there is no path."
msgstr ""

#: ../../build/doc/bdDijkstra-family.rst:60
msgid "The `agg_cost` the non included values `(v, v)` is `0`"
msgstr ""

#: ../../build/doc/bdDijkstra-family.rst:62
msgid "When the starting vertex and ending vertex are the different and there is no path:"
msgstr ""

#: ../../build/doc/bdDijkstra-family.rst:64
msgid "The `agg_cost` the non included values `(u, v)` is :math:`\\infty`"
msgstr ""

#: ../../build/doc/bdDijkstra-family.rst:66
msgid "Running time (worse case scenario): :math:`O((V \\log V + E))`"
msgstr ""

#: ../../build/doc/bdDijkstra-family.rst:67
msgid "For large graphs where there is a path bewtween the starting vertex and ending vertex:"
msgstr ""

#: ../../build/doc/bdDijkstra-family.rst:69
msgid "It is expected to terminate faster than pgr_dijkstra"
msgstr ""

#: ../../build/doc/bdDijkstra-family.rst:74
msgid "See Also"
msgstr ""

#: ../../build/doc/bdDijkstra-family.rst:77
msgid "Indices and tables"
msgstr ""

#: ../../build/doc/bdDijkstra-family.rst:78
msgid ":ref:`genindex`"
msgstr ""

#: ../../build/doc/bdDijkstra-family.rst:79
msgid ":ref:`search`"
msgstr ""

