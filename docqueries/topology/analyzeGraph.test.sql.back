DROP TABLE IF EXISTS vertices_table;
UPDATE edge_table
SET source = NULL, target = NULL,
x1 = NULL, y1 = NULL,
x2 = NULL, y2 = NULL;
SELECT  * INTO vertices_table
FROM pgr_extractVertices('SELECT id, the_geom AS geom FROM edge_table ORDER BY id');
SELECT *
FROM vertices_table;
WITH
out_going AS (
  SELECT id AS vid, unnest(out_edges) AS eid, x, y
  FROM vertices_table
)
UPDATE edge_table
SET source = vid, x1 = x, y1 = y
FROM out_going WHERE id = eid;
WITH
in_coming AS (
  SELECT id AS vid, unnest(in_edges) AS eid, x, y
  FROM vertices_table
)
UPDATE edge_table
SET target = vid, x2 = x, y2 = y
FROM in_coming WHERE id = eid;
SELECT id, source, target, x1, y1, x2, y2
FROM edge_table;
/* -- q1 */
SELECT id, in_edges, out_edges  FROM vertices_table WHERE array_length(in_edges || out_edges, 1) = 1;
/* -- q2 */
SELECT id, array_length(in_edges || out_edges, 1) AS cnt FROM vertices_table;

ALTER TABLE vertices_table ADD column degree BIGINT;
UPDATE vertices_table AS v SET degree = cnt
FROM (SELECT id, array_length(in_edges || out_edges, 1) AS cnt FROM vertices_table) AS d
WHERE v.id = d.id;
SELECT count(*) FROM vertices_table WHERE degree <= 1;

/* -- q3 */
WITH
subgraph AS (SELECT id AS eid FROM edge_table WHERE id < 17),
subvertices AS (SELECT id, unnest(in_edges || out_edges) AS eid FROM vertices_table),
totals AS (SELECT id, count(*) FROM subvertices JOIN subgraph USING(eid) GROUP BY id)
SELECT id, coalesce(count, 0) AS cnt FROM vertices_table LEFT JOIN totals USING (id);
/* -- q4 */
WITH
graph AS (SELECT * FROM edge_table WHERE cost >= 0 OR reverse_cost >= 0),
counting_departures_from_source AS (
  SELECT source AS id, count(*), array_agg(id) as eid_out
  FROM graph WHERE cost >= 0 GROUP BY source),
counting_departures_from_target AS (
  SELECT target AS id, count(*), array_agg(id) as eid_out
  FROM graph WHERE reverse_cost >= 0 GROUP BY target),
departure_totals AS (SELECT id, coalesce(s.count,0) + coalesce(t.count,0) AS cnt_out, s.eid_out || t.eid_out AS eid_out
  FROM counting_departures_from_source AS s
  FULL JOIN counting_departures_from_target AS t USING (id)),

counting_arrivals_to_source AS (
  SELECT target AS id, count(*), array_agg(id) as eid_in
  FROM graph WHERE cost >= 0 GROUP BY target),
counting_arrivals_to_target AS (
  SELECT source AS id, count(*), array_agg(id) as eid_in
  FROM graph WHERE reverse_cost >= 0 GROUP BY source),
arrival_totals AS (SELECT id, coalesce(s.count,0) + coalesce(t.count,0) AS cnt_in, s.eid_in || t.eid_in AS eid_in
  FROM counting_arrivals_to_source AS s
  FULL JOIN counting_arrivals_to_target AS t USING (id))

SELECT id, coalesce(cnt_out, 0) AS cnt_out, coalesce(cnt_in,0) AS cnt_in, eid_out, eid_in,
  coalesce(cnt_out,0) = 0 OR coalesce(cnt_in,0) = 0 OR array_length(eid_out, 1) = 1
  AND eid_out && eid_in AS is_dead_end
FROM vertices_table LEFT JOIN departure_totals USING(id)
LEFT JOIN arrival_totals USING(id);
/* -- q5 */
SELECT count(*) FROM edge_table WHERE ST_IsRing(the_geom);
/* -- q6 */
SELECT id FROM edge_table WHERE ST_IsRing(the_geom);
/* -- q7 */
SELECT count(*) FROM edge_table AS a, edge_table AS b WHERE a.id < b.id AND st_crosses(a.the_geom, b.the_geom);
/* -- q8 */
SELECT a.id, b.id FROM edge_table AS a, edge_table AS b WHERE a.id < b.id AND st_crosses(a.the_geom, b.the_geom);
/* -- q9 */
WITH
graph AS (SELECT * FROM edge_table)
SELECT count(*)
FROM vertices_table AS v, edge_table AS e
WHERE v.geom <-> e.the_geom < 0.001 AND v.geom <-> e.the_geom != 0;
/* -- q10 */
WITH
graph AS (SELECT * FROM edge_table)
SELECT v.id AS vid, e.id AS eid
FROM vertices_table AS v, edge_table AS e
WHERE v.geom <-> e.the_geom < 0.001 AND v.geom <-> e.the_geom != 0;
/* -- q11 */
