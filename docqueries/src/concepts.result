BEGIN;
BEGIN
SET client_min_messages TO NOTICE;
SET
/* -- g1 */
SELECT *
FROM (VALUES (1, 1, 2, 5), (2, 1, 3, -3))
     AS t(id, source, target, cost);
 id | source | target | cost
----+--------+--------+------
  1 |      1 |      2 |    5
  2 |      1 |      3 |   -3
(2 rows)

/* -- g2 */
SELECT *
FROM (VALUES (1, 1, 2, 5, 2), (2, 1, 3, -3, 4), (3, 2, 3, 7, -1))
     AS t(id, source, target, cost, reverse_cost);
 id | source | target | cost | reverse_cost
----+--------+--------+------+--------------
  1 |      1 |      2 |    5 |            2
  2 |      1 |      3 |   -3 |            4
  3 |      2 |      3 |    7 |           -1
(3 rows)

/* -- g3 */
DROP TABLE IF EXISTS wiki;
NOTICE:  table "wiki" does not exist, skipping
DROP TABLE
/* -- q1 */
CREATE TABLE wiki (
  id SERIAL,
  source INTEGER,
  target INTEGER,
  cost INTEGER);
CREATE TABLE
/* -- q2 */
INSERT INTO wiki (source, target, cost) VALUES
(1, 2, 7),  (1, 3, 9), (1, 6, 14),
(2, 3, 10), (2, 4, 15),
(3, 6, 2),  (3, 4, 11),
(4, 5, 6),
(5, 6, 9);
INSERT 0 9
/* -- q3 */
SELECT * FROM pgr_dijkstra(
  'SELECT id, source, target, cost FROM wiki',
  1, 5, false);
 seq | path_seq | node | edge | cost | agg_cost
-----+----------+------+------+------+----------
   1 |        1 |    1 |    2 |    9 |        0
   2 |        2 |    3 |    6 |    2 |        9
   3 |        3 |    6 |    9 |    9 |       11
   4 |        4 |    5 |   -1 |    0 |       20
(4 rows)

/* -- q4 */
SELECT id, source, target FROM wiki;
 id | source | target
----+--------+--------
  1 |      1 |      2
  2 |      1 |      3
  3 |      1 |      6
  4 |      2 |      3
  5 |      2 |      4
  6 |      3 |      6
  7 |      3 |      4
  8 |      4 |      5
  9 |      5 |      6
(9 rows)

SELECT id, in_edges, out_edges
FROM pgr_extractVertices('SELECT id, source, target FROM wiki');
 id | in_edges | out_edges
----+----------+-----------
  3 | {2,4}    | {6,7}
  5 | {8}      | {9}
  4 | {5,7}    | {8}
  2 | {1}      | {4,5}
  1 |          | {1,2,3}
  6 | {3,6,9}  |
(6 rows)

/* -- q5 */
/* -- topo1 */
UPDATE edges SET
cost = sign(cost) * ST_length(geom),
reverse_cost = sign(reverse_cost) * ST_length(geom);
UPDATE 18
/* -- topo2 */
SELECT id, cost, reverse_cost FROM edges;
 id |        cost        |    reverse_cost
----+--------------------+--------------------
  6 |                  1 |                  1
  7 |                  1 |                  1
  4 |                  1 |                  1
  5 |                  1 |                 -1
  8 |                  1 |                  1
 12 |                  1 |                 -1
 11 |                  1 |                 -1
 10 |                  1 |                  1
 17 |     1.499999999999 |     1.499999999999
 14 |                  1 |                  1
 18 | 1.7000000000000002 | 1.7000000000000002
 13 |                  1 |                 -1
 15 |                  1 |                  1
 16 |                  1 |                  1
  9 |                  1 |                  1
  3 |                 -1 |                  1
  1 |                  1 |                  1
  2 |                 -1 |                  1
(18 rows)

/* -- topo3 */
UPDATE edges SET
cost = sign(cost),
reverse_cost = sign(reverse_cost);
UPDATE 18
/* -- topo4 */
/* -- check1 */
SELECT a.id, b.id i
FROM edges AS a, edges AS b
WHERE a.id < b.id AND st_crosses(a.geom, b.geom);
 id | i
----+----
 13 | 18
(1 row)

/* -- check2 */
SELECT ST_AsText((ST_Dump(ST_Split(a.geom, b.geom))).geom)
FROM edges AS a, edges AS b
WHERE a.id = 13 AND b.id = 18
UNION
SELECT ST_AsText((ST_Dump(ST_Split(b.geom, a.geom))).geom)
FROM edges AS a, edges AS b
WHERE a.id = 13 AND b.id = 18;
         st_astext
---------------------------
 LINESTRING(3.5 2.3,3.5 3)
 LINESTRING(3 3,3.5 3)
 LINESTRING(3.5 3,4 3)
 LINESTRING(3.5 3,3.5 4)
(4 rows)

/* -- check3 */
SELECT id FROM vertices
WHERE array_length(in_edges || out_edges, 1) = 1;
 id
----
  1
  2
  4
  5
  9
 13
 14
(7 rows)

/* -- check4 */
ROLLBACK;
ROLLBACK
